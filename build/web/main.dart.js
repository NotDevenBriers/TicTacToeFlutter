// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const io = dart_sdk.io;
  const convert = dart_sdk.convert;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = flutter_sdk.src__widgets__framework;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const binding = flutter_sdk.src__widgets__binding;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const scaffold = flutter_sdk.src__material__scaffold;
  const basic = flutter_sdk.src__widgets__basic;
  const flex = flutter_sdk.src__rendering__flex;
  const image = flutter_sdk.src__widgets__image;
  const text = flutter_sdk.src__widgets__text;
  const text_style = flutter_sdk.src__painting__text_style;
  const colors = flutter_sdk.src__material__colors;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const system_navigator = flutter_sdk.src__services__system_navigator;
  const media_query = flutter_sdk.src__widgets__media_query;
  const app_bar = flutter_sdk.src__material__app_bar;
  const box = flutter_sdk.src__rendering__box;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const sliver_grid = flutter_sdk.src__rendering__sliver_grid;
  const ink_well = flutter_sdk.src__material__ink_well;
  const grid_tile = flutter_sdk.src__material__grid_tile;
  const container = flutter_sdk.src__widgets__container;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const box_border = flutter_sdk.src__painting__box_border;
  const box_fit = flutter_sdk.src__painting__box_fit;
  const bottom_app_bar = flutter_sdk.src__material__bottom_app_bar;
  const icon_button = flutter_sdk.src__material__icon_button;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const dropdown = flutter_sdk.src__material__dropdown;
  const alignment = flutter_sdk.src__painting__alignment;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var splash_screen = Object.create(dart.library);
  var main_screen = Object.create(dart.library);
  var game_page = Object.create(dart.library);
  var options_screen = Object.create(dart.library);
  var high_scores = Object.create(dart.library);
  var single_player_game = Object.create(dart.library);
  var csv$ = Object.create(dart.library);
  var path_provider = Object.create(dart.library);
  var csv_settings_autodetection = Object.create(dart.library);
  var complex_converter = Object.create(dart.library);
  var csv_parser = Object.create(dart.library);
  var path_provider_platform_interface = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var enums = Object.create(dart.library);
  var method_channel_path_provider = Object.create(dart.library);
  var platform = Object.create(dart.library);
  var local_platform = Object.create(dart.library);
  var platform$ = Object.create(dart.library);
  var fake_platform = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $isEmpty = dartx.isEmpty;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $contains = dartx.contains;
  var $length = dartx.length;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $addAll = dartx.addAll;
  var $_equals = dartx._equals;
  var $clear = dartx.clear;
  var $forEach = dartx.forEach;
  var $replaceAll = dartx.replaceAll;
  var $fold = dartx.fold;
  var $codeUnits = dartx.codeUnits;
  var $iterator = dartx.iterator;
  var $join = dartx.join;
  var $first = dartx.first;
  var $indexOf = dartx.indexOf;
  var $substring = dartx.substring;
  var $compareTo = dartx.compareTo;
  var $startsWith = dartx.startsWith;
  var $cast = dartx.cast;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    BuildContextToMainScreen: () => (T.BuildContextToMainScreen = dart.constFn(dart.fnType(main_screen.MainScreen, [framework.BuildContext])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    BuildContextToSinglePlayerGamePage: () => (T.BuildContextToSinglePlayerGamePage = dart.constFn(dart.fnType(single_player_game.SinglePlayerGamePage, [framework.BuildContext])))(),
    BuildContextToGamePage: () => (T.BuildContextToGamePage = dart.constFn(dart.fnType(game_page.GamePage, [framework.BuildContext])))(),
    BuildContextToOptionsScreen: () => (T.BuildContextToOptionsScreen = dart.constFn(dart.fnType(options_screen.OptionsScreen, [framework.BuildContext])))(),
    BuildContextToHighScores: () => (T.BuildContextToHighScores = dart.constFn(dart.fnType(high_scores.HighScores, [framework.BuildContext])))(),
    BuildContextAndintToInkWell: () => (T.BuildContextAndintToInkWell = dart.constFn(dart.fnType(ink_well.InkWell, [framework.BuildContext, core.int])))(),
    RouteTobool: () => (T.RouteTobool = dart.constFn(dart.fnType(core.bool, [navigator.Route])))(),
    DropdownButtonOfString: () => (T.DropdownButtonOfString = dart.constFn(dropdown.DropdownButton$(core.String)))(),
    DropdownMenuItemOfString: () => (T.DropdownMenuItemOfString = dart.constFn(dropdown.DropdownMenuItem$(core.String)))(),
    StringToDropdownMenuItemOfString: () => (T.StringToDropdownMenuItemOfString = dart.constFn(dart.fnType(T.DropdownMenuItemOfString(), [core.String])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringNTovoid: () => (T.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T.StringN()])))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    TimerTovoid: () => (T.TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    JSArrayOfList: () => (T.JSArrayOfList = dart.constFn(_interceptors.JSArray$(core.List)))(),
    SinkOfList: () => (T.SinkOfList = dart.constFn(core.Sink$(core.List)))(),
    JSArrayOfStringN: () => (T.JSArrayOfStringN = dart.constFn(_interceptors.JSArray$(T.StringN())))(),
    StreamOfString: () => (T.StreamOfString = dart.constFn(async.Stream$(core.String)))(),
    StreamOfList: () => (T.StreamOfList = dart.constFn(async.Stream$(core.List)))(),
    EventSinkToComplexConverterStreamEventSink: () => (T.EventSinkToComplexConverterStreamEventSink = dart.constFn(dart.fnType(complex_converter.ComplexConverterStreamEventSink, [async.EventSink])))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    ListNTovoid: () => (T.ListNTovoid = dart.constFn(dart.fnType(dart.void, [T.ListN()])))(),
    SinkOfString: () => (T.SinkOfString = dart.constFn(core.Sink$(core.String)))(),
    StringBufferAnddynamicToStringBuffer: () => (T.StringBufferAnddynamicToStringBuffer = dart.constFn(dart.fnType(core.StringBuffer, [core.StringBuffer, dart.dynamic])))(),
    LinkedHashSetOfint: () => (T.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))(),
    JSArrayOfListN: () => (T.JSArrayOfListN = dart.constFn(_interceptors.JSArray$(T.ListN())))(),
    DirectoryN: () => (T.DirectoryN = dart.constFn(dart.nullable(io.Directory)))(),
    StringToDirectory: () => (T.StringToDirectory = dart.constFn(dart.fnType(io.Directory, [core.String])))(),
    ListOfDirectory: () => (T.ListOfDirectory = dart.constFn(core.List$(io.Directory)))(),
    ListNOfDirectory: () => (T.ListNOfDirectory = dart.constFn(dart.nullable(T.ListOfDirectory())))(),
    StringNToString: () => (T.StringNToString = dart.constFn(dart.fnType(core.String, [T.StringN()])))(),
    ListNOfString: () => (T.ListNOfString = dart.constFn(dart.nullable(T.ListOfString())))(),
    ListNOfStringToStringN: () => (T.ListNOfStringToStringN = dart.constFn(dart.fnType(T.StringN(), [T.ListNOfString()])))(),
    StringTovoid: () => (T.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    JSArrayOfArgumentError: () => (T.JSArrayOfArgumentError = dart.constFn(_interceptors.JSArray$(core.ArgumentError)))(),
    IdentityMapOfString$StringN: () => (T.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T.StringN())))(),
    StringAndStringNTovoid: () => (T.StringAndStringNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T.StringN()])))(),
    ArgumentErrorToString: () => (T.ArgumentErrorToString = dart.constFn(dart.fnType(core.String, [core.ArgumentError])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    LinkedHashMapOfString$String: () => (T.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    MapOfObjectN$ObjectN: () => (T.MapOfObjectN$ObjectN = dart.constFn(core.Map$(T.ObjectN(), T.ObjectN())))(),
    ListOfObjectN: () => (T.ListOfObjectN = dart.constFn(core.List$(T.ObjectN())))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    MapOfString$String: () => (T.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4279377967
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Single Player Game"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "2 Player Game"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Options"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "High Scores"
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Exit"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "StarWars TicTacToe"
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 3,
        [EdgeInsets_right]: 3,
        [EdgeInsets_top]: 3,
        [EdgeInsets_left]: 3
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: sliver_grid.SliverGridDelegateWithFixedCrossAxisCount.prototype,
        [SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent]: null,
        [SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio]: 1,
        [SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing]: 0,
        [SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing]: 0,
        [SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount]: 3
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 8
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_value]: 700,
        [FontWeight_index]: 6
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[13] || CT.C13,
        [TextStyle_fontSize]: 24,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58136
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[15] || CT.C15
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58751
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[17] || CT.C17
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58644
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[19] || CT.C19
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[13] || CT.C13,
        [TextStyle_fontSize]: 16,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: C[21] || CT.C21,
        [Text_textSpan]: null,
        [Text_data]: "Select Theme:"
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "This is a simple High Scores Screen!"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: basic.Center.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: C[23] || CT.C23,
        [Align_heightFactor]: null,
        [Align_widthFactor]: null,
        [Align_alignment]: C[24] || CT.C24
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[13] || CT.C13,
        [TextStyle_fontSize]: 20,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: csv$.EmptyValue.prototype,
        [_Enum__name]: "NULL",
        [_Enum_index]: 0
      });
    },
    get C26() {
      return C[26] = dart.constList([C[27] || CT.C27], csv$.EmptyValue);
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: csv_parser.ParsingStopReason.prototype,
        [_value$]: "Eol"
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: csv_parser.ParsingStopReason.prototype,
        [_value$]: "FieldDelimiter"
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: csv_parser.ParsingStopReason.prototype,
        [_value$]: "EndOfString"
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "music",
        [_Enum_index]: 0
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "podcasts",
        [_Enum_index]: 1
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "ringtones",
        [_Enum_index]: 2
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "alarms",
        [_Enum_index]: 3
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "notifications",
        [_Enum_index]: 4
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "pictures",
        [_Enum_index]: 5
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "movies",
        [_Enum_index]: 6
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "downloads",
        [_Enum_index]: 7
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "dcim",
        [_Enum_index]: 8
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: enums.StorageDirectory.prototype,
        [_Enum__name]: "documents",
        [_Enum_index]: 9
      });
    },
    get C32() {
      return C[32] = dart.constList([C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42], enums.StorageDirectory);
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[45] || CT.C45
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[44] || CT.C44,
        [MethodChannel_name]: "plugins.flutter.io/path_provider"
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: local_platform.LocalPlatform.prototype
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: convert.JsonEncoder.prototype,
        [JsonEncoder__toEncodable]: null,
        [JsonEncoder_indent]: "  "
      });
    },
    get C48() {
      return C[48] = dart.constList(["linux", "macos", "windows", "android", "ios", "fuchsia"], core.String);
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: convert.JsonDecoder.prototype,
        [JsonDecoder__reviver]: null
      });
    }
  }, false);
  var C = Array(50).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/project/lib/screens/splash_screen.dart",
    "file:///zapp/project/lib/screens/main_screen.dart",
    "file:///zapp/project/lib/screens/game_page.dart",
    "file:///zapp/project/lib/screens/options_screen.dart",
    "file:///zapp/project/lib/screens/high_scores.dart",
    "file:///zapp/project/lib/screens/single_player_game.dart",
    "package:csv/csv.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/csv-5.1.1/lib/csv_to_list_converter.dart",
    "package:path_provider/path_provider.dart",
    "package:csv/csv_settings_autodetection.dart",
    "package:csv/src/complex_converter.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/csv-5.1.1/lib/src/csv_parser.dart",
    "package:csv/src/csv_parser.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:path_provider_platform_interface/path_provider_platform_interface.dart",
    "package:path_provider_platform_interface/src/enums.dart",
    "package:path_provider_platform_interface/src/method_channel_path_provider.dart",
    "package:platform/src/interface/platform.dart",
    "package:platform/src/interface/local_platform.dart",
    "package:platform/src/testing/fake_platform.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatefulWidget {
    static of(context) {
      return context.findAncestorStateOfType(main._MyAppState);
    }
    createState() {
      return new main._MyAppState.new();
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    createState: dart.fnType(main._MyAppState, [])
  }));
  dart.setStaticMethodSignature(main.MyApp, () => ['of']);
  dart.setLibraryUri(main.MyApp, I[0]);
  var _isDarkMode = dart.privateName(main, "_isDarkMode");
  main._MyAppState = class _MyAppState extends framework.State$(main.MyApp) {
    getIsDarkMode() {
      return this[_isDarkMode];
    }
    toggleTheme(isOn) {
      this.setState(dart.fn(() => {
        this[_isDarkMode] = isOn;
      }, T.VoidTovoid()));
    }
    build(context) {
      return new app.MaterialApp.new({title: "TicTacToe", theme: this[_isDarkMode] ? theme_data.ThemeData.dark() : theme_data.ThemeData.light(), home: new splash_screen.SplashScreen.new()});
    }
    static ['_#new#tearOff']() {
      return new main._MyAppState.new();
    }
  };
  (main._MyAppState.new = function() {
    this[_isDarkMode] = true;
    main._MyAppState.__proto__.new.call(this);
    ;
  }).prototype = main._MyAppState.prototype;
  dart.addTypeTests(main._MyAppState);
  dart.addTypeCaches(main._MyAppState);
  dart.setMethodSignature(main._MyAppState, () => ({
    __proto__: dart.getMethods(main._MyAppState.__proto__),
    getIsDarkMode: dart.fnType(core.bool, []),
    toggleTheme: dart.fnType(dart.void, [core.bool]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._MyAppState, I[0]);
  dart.setFieldSignature(main._MyAppState, () => ({
    __proto__: dart.getFields(main._MyAppState.__proto__),
    [_isDarkMode]: dart.fieldType(core.bool)
  }));
  main.main = function main$0() {
    return async.async(dart.void, function* main$() {
      binding.WidgetsFlutterBinding.ensureInitialized();
      binding.runApp(new main.MyApp.new());
    });
  };
  var Color_value = dart.privateName(ui, "Color.value");
  dart.defineLazy(main, {
    /*main.darkBlue*/get darkBlue() {
      return C[1] || CT.C1;
    }
  }, false);
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  splash_screen.SplashScreen = class SplashScreen extends framework.StatefulWidget {
    createState() {
      return new splash_screen._SplashScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new splash_screen.SplashScreen.new();
    }
  };
  (splash_screen.SplashScreen.new = function() {
    splash_screen.SplashScreen.__proto__.new.call(this);
    ;
  }).prototype = splash_screen.SplashScreen.prototype;
  dart.addTypeTests(splash_screen.SplashScreen);
  dart.addTypeCaches(splash_screen.SplashScreen);
  dart.setMethodSignature(splash_screen.SplashScreen, () => ({
    __proto__: dart.getMethods(splash_screen.SplashScreen.__proto__),
    createState: dart.fnType(splash_screen._SplashScreenState, [])
  }));
  dart.setLibraryUri(splash_screen.SplashScreen, I[1]);
  splash_screen._SplashScreenState = class _SplashScreenState extends framework.State$(splash_screen.SplashScreen) {
    initState() {
      super.initState();
      async.Timer.new(new core.Duration.new({seconds: 5}), dart.fn(() => {
        navigator.Navigator.of(this.context).pushReplacement(dart.dynamic, T.ObjectN(), new page.MaterialPageRoute.new({builder: dart.fn(_ => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}));
      }, T.VoidTovoid()));
    }
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new image.Image.asset("assets/logos/Logo.png"), new basic.SizedBox.new({height: 20}), new text.Text.new("© Created \nfor Educational purposes at \nBlackpool and the Fylde College \n Assignment 1 of 2 \n Deven Briers 30209881", {style: new text_style.TextStyle.new({fontSize: 14, fontWeight: ui.FontWeight.normal, color: colors.Colors.white}), textAlign: ui.TextAlign.center})])})})});
    }
    static ['_#new#tearOff']() {
      return new splash_screen._SplashScreenState.new();
    }
  };
  (splash_screen._SplashScreenState.new = function() {
    splash_screen._SplashScreenState.__proto__.new.call(this);
    ;
  }).prototype = splash_screen._SplashScreenState.prototype;
  dart.addTypeTests(splash_screen._SplashScreenState);
  dart.addTypeCaches(splash_screen._SplashScreenState);
  dart.setMethodSignature(splash_screen._SplashScreenState, () => ({
    __proto__: dart.getMethods(splash_screen._SplashScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(splash_screen._SplashScreenState, I[1]);
  var _navigateToSinglePlayerGame = dart.privateName(main_screen, "_navigateToSinglePlayerGame");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  main_screen.MainScreen = class MainScreen extends framework.StatelessWidget {
    [_navigateToSinglePlayerGame](context) {
      navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new single_player_game.SinglePlayerGamePage.new(), T.BuildContextToSinglePlayerGamePage())}));
    }
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Center.new({child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, children: T.JSArrayOfWidget().of([new image.Image.asset("assets/logos/Logo.png", {width: 300, height: 300}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    this[_navigateToSinglePlayerGame](context);
                  }, T.VoidTovoid()), child: C[3] || CT.C3})}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new game_page.GamePage.new(), T.BuildContextToGamePage())}));
                  }, T.VoidTovoid()), child: C[4] || CT.C4})}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new options_screen.OptionsScreen.new(), T.BuildContextToOptionsScreen())}));
                  }, T.VoidTovoid()), child: C[5] || CT.C5})}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new high_scores.HighScores.new(), T.BuildContextToHighScores())}));
                  }, T.VoidTovoid()), child: C[6] || CT.C6})}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    system_navigator.SystemNavigator.pop();
                  }, T.VoidTovoid()), child: C[7] || CT.C7})})])})})});
    }
    static ['_#new#tearOff']() {
      return new main_screen.MainScreen.new();
    }
  };
  (main_screen.MainScreen.new = function() {
    main_screen.MainScreen.__proto__.new.call(this);
    ;
  }).prototype = main_screen.MainScreen.prototype;
  dart.addTypeTests(main_screen.MainScreen);
  dart.addTypeCaches(main_screen.MainScreen);
  dart.setMethodSignature(main_screen.MainScreen, () => ({
    __proto__: dart.getMethods(main_screen.MainScreen.__proto__),
    [_navigateToSinglePlayerGame]: dart.fnType(dart.void, [framework.BuildContext]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main_screen.MainScreen, I[2]);
  game_page.GamePage = class GamePage extends framework.StatefulWidget {
    createState() {
      return new game_page.GamePageState.new();
    }
    static ['_#new#tearOff']() {
      return new game_page.GamePage.new();
    }
  };
  (game_page.GamePage.new = function() {
    game_page.GamePage.__proto__.new.call(this);
    ;
  }).prototype = game_page.GamePage.prototype;
  dart.addTypeTests(game_page.GamePage);
  dart.addTypeCaches(game_page.GamePage);
  dart.setMethodSignature(game_page.GamePage, () => ({
    __proto__: dart.getMethods(game_page.GamePage.__proto__),
    createState: dart.fnType(game_page.GamePageState, [])
  }));
  dart.setLibraryUri(game_page.GamePage, I[3]);
  var board = dart.privateName(game_page, "GamePageState.board");
  var currentPlayer = dart.privateName(game_page, "GamePageState.currentPlayer");
  var statusMessage = dart.privateName(game_page, "GamePageState.statusMessage");
  var _checkWinner = dart.privateName(game_page, "_checkWinner");
  var _isDraw = dart.privateName(game_page, "_isDraw");
  var _handleTap = dart.privateName(game_page, "_handleTap");
  var SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.mainAxisExtent");
  var SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.childAspectRatio");
  var SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.crossAxisSpacing");
  var SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.mainAxisSpacing");
  var SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.crossAxisCount");
  var TextStyle_overflow = dart.privateName(text_style, "TextStyle.overflow");
  var TextStyle_fontVariations = dart.privateName(text_style, "TextStyle.fontVariations");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var FontWeight_value = dart.privateName(ui, "FontWeight.value");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  game_page.GamePageState = class GamePageState extends framework.State$(game_page.GamePage) {
    get board() {
      return this[board];
    }
    set board(value) {
      this[board] = value;
    }
    get currentPlayer() {
      return this[currentPlayer];
    }
    set currentPlayer(value) {
      this[currentPlayer] = value;
    }
    get statusMessage() {
      return this[statusMessage];
    }
    set statusMessage(value) {
      this[statusMessage] = value;
    }
    [_handleTap](index) {
      if (this.board[$_get](index) !== "" || this[_checkWinner]("X") || this[_checkWinner]("O")) return;
      this.setState(dart.fn(() => {
        this.board[$_set](index, this.currentPlayer);
        if (this[_checkWinner](this.currentPlayer)) {
          this.statusMessage = this.currentPlayer + " Wins!";
        } else if (this[_isDraw]()) {
          this.statusMessage = "Game is a Draw!";
        } else {
          this.currentPlayer = this.currentPlayer === "X" ? "O" : "X";
          this.statusMessage = "Current Player: " + this.currentPlayer;
        }
      }, T.VoidTovoid()));
    }
    [_checkWinner](player) {
      for (let i = 0; i < 3; i = i + 1) {
        if (this.board[$_get](i) === player && this.board[$_get](i + 3) === player && this.board[$_get](i + 6) === player || this.board[$_get](i * 3) === player && this.board[$_get](i * 3 + 1) === player && this.board[$_get](i * 3 + 2) === player) {
          return true;
        }
      }
      if (this.board[$_get](0) === player && this.board[$_get](4) === player && this.board[$_get](8) === player || this.board[$_get](2) === player && this.board[$_get](4) === player && this.board[$_get](6) === player) {
        return true;
      }
      return false;
    }
    [_isDraw]() {
      for (let cell of this.board) {
        if (cell[$isEmpty]) {
          return false;
        }
      }
      return !this[_checkWinner]("X") && !this[_checkWinner]("O");
    }
    build(context) {
      let screenSize = media_query.MediaQuery.of(context).size;
      let gridDimension = screenSize.width < screenSize.height ? screenSize.width * 0.8 : screenSize.height * 0.8;
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[8] || CT.C8}), body: new basic.Center.new({child: new basic.ConstrainedBox.new({constraints: new box.BoxConstraints.new({maxWidth: gridDimension, maxHeight: gridDimension}), child: new basic.Column.new({children: T.JSArrayOfWidget().of([new basic.Expanded.new({child: new scroll_view.GridView.builder({padding: C[9] || CT.C9, gridDelegate: C[10] || CT.C10, itemCount: 9, itemBuilder: dart.fn((context, index) => new ink_well.InkWell.new({onTap: dart.fn(() => this[_handleTap](index), T.VoidTovoid()), child: new grid_tile.GridTile.new({child: new container.Container.new({decoration: new box_decoration.BoxDecoration.new({border: box_border.Border.all()}), child: new basic.Center.new({child: this.board[$_get](index)[$isEmpty] ? null : new image.Image.asset("assets/icons/" + this.board[$_get](index) + ".png", {fit: box_fit.BoxFit.cover})})})})}), T.BuildContextAndintToInkWell())})}), new basic.Padding.new({padding: C[11] || CT.C11, child: new text.Text.new(this.statusMessage, {style: C[12] || CT.C12})})])})})}), bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[14] || CT.C14, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[16] || CT.C16, onPressed: dart.fn(() => {
                  navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new options_screen.OptionsScreen.new(), T.BuildContextToOptionsScreen())}));
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[18] || CT.C18, onPressed: dart.fn(() => {
                  this.setState(dart.fn(() => {
                    this.board = T.ListOfString().filled(9, "");
                    this.currentPlayer = "X";
                    this.statusMessage = "Current Player: " + this.currentPlayer;
                  }, T.VoidTovoid()));
                }, T.VoidTovoid())})])})})});
    }
    static ['_#new#tearOff']() {
      return new game_page.GamePageState.new();
    }
  };
  (game_page.GamePageState.new = function() {
    this[board] = T.ListOfString().filled(9, "");
    this[currentPlayer] = "X";
    this[statusMessage] = "Current Player: X";
    game_page.GamePageState.__proto__.new.call(this);
    ;
  }).prototype = game_page.GamePageState.prototype;
  dart.addTypeTests(game_page.GamePageState);
  dart.addTypeCaches(game_page.GamePageState);
  dart.setMethodSignature(game_page.GamePageState, () => ({
    __proto__: dart.getMethods(game_page.GamePageState.__proto__),
    [_handleTap]: dart.fnType(dart.void, [core.int]),
    [_checkWinner]: dart.fnType(core.bool, [core.String]),
    [_isDraw]: dart.fnType(core.bool, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(game_page.GamePageState, I[3]);
  dart.setFieldSignature(game_page.GamePageState, () => ({
    __proto__: dart.getFields(game_page.GamePageState.__proto__),
    board: dart.fieldType(core.List$(core.String)),
    currentPlayer: dart.fieldType(core.String),
    statusMessage: dart.fieldType(core.String)
  }));
  options_screen.OptionsScreen = class OptionsScreen extends framework.StatefulWidget {
    createState() {
      return new options_screen._OptionsScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new options_screen.OptionsScreen.new();
    }
  };
  (options_screen.OptionsScreen.new = function() {
    options_screen.OptionsScreen.__proto__.new.call(this);
    ;
  }).prototype = options_screen.OptionsScreen.prototype;
  dart.addTypeTests(options_screen.OptionsScreen);
  dart.addTypeCaches(options_screen.OptionsScreen);
  dart.setMethodSignature(options_screen.OptionsScreen, () => ({
    __proto__: dart.getMethods(options_screen.OptionsScreen.__proto__),
    createState: dart.fnType(options_screen._OptionsScreenState, [])
  }));
  dart.setLibraryUri(options_screen.OptionsScreen, I[4]);
  var ___OptionsScreenState__selectedTheme = dart.privateName(options_screen, "_#_OptionsScreenState#_selectedTheme");
  var _selectedTheme = dart.privateName(options_screen, "_selectedTheme");
  options_screen._OptionsScreenState = class _OptionsScreenState extends framework.State$(options_screen.OptionsScreen) {
    get [_selectedTheme]() {
      let t0;
      t0 = this[___OptionsScreenState__selectedTheme];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_selectedTheme")) : t0;
    }
    set [_selectedTheme](_selectedTheme$35param) {
      this[___OptionsScreenState__selectedTheme] = _selectedTheme$35param;
    }
    initState() {
      let t0;
      super.initState();
      this[_selectedTheme] = (t0 = main.MyApp.of(this.context), t0 == null ? null : t0.getIsDarkMode()) === true ? "Dark" : "Light";
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[5] || CT.C5}), body: new basic.Center.new({child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, children: T.JSArrayOfWidget().of([C[20] || CT.C20, new (T.DropdownButtonOfString()).new({value: this[_selectedTheme], items: T.JSArrayOfString().of(["Dark", "Light"])[$map](T.DropdownMenuItemOfString(), dart.fn(value => new (T.DropdownMenuItemOfString()).new({value: value, child: new text.Text.new(value)}), T.StringToDropdownMenuItemOfString()))[$toList](), onChanged: dart.fn(newValue => {
                  this.setState(dart.fn(() => {
                    this[_selectedTheme] = dart.nullCheck(newValue);
                    dart.nullCheck(main.MyApp.of(context)).toggleTheme(this[_selectedTheme] === "Dark");
                  }, T.VoidTovoid()));
                }, T.StringNTovoid())})])})}), bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[14] || CT.C14, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())})])})})});
    }
    static ['_#new#tearOff']() {
      return new options_screen._OptionsScreenState.new();
    }
  };
  (options_screen._OptionsScreenState.new = function() {
    this[___OptionsScreenState__selectedTheme] = null;
    options_screen._OptionsScreenState.__proto__.new.call(this);
    ;
  }).prototype = options_screen._OptionsScreenState.prototype;
  dart.addTypeTests(options_screen._OptionsScreenState);
  dart.addTypeCaches(options_screen._OptionsScreenState);
  dart.setMethodSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getMethods(options_screen._OptionsScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getGetters(options_screen._OptionsScreenState.__proto__),
    [_selectedTheme]: core.String
  }));
  dart.setSetterSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getSetters(options_screen._OptionsScreenState.__proto__),
    [_selectedTheme]: core.String
  }));
  dart.setLibraryUri(options_screen._OptionsScreenState, I[4]);
  dart.setFieldSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getFields(options_screen._OptionsScreenState.__proto__),
    [___OptionsScreenState__selectedTheme]: dart.fieldType(dart.nullable(core.String))
  }));
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var Align_heightFactor = dart.privateName(basic, "Align.heightFactor");
  var Align_widthFactor = dart.privateName(basic, "Align.widthFactor");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var Align_alignment = dart.privateName(basic, "Align.alignment");
  high_scores.HighScores = class HighScores extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[6] || CT.C6}), body: C[22] || CT.C22, bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[14] || CT.C14, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())})])})})});
    }
    static ['_#new#tearOff']() {
      return new high_scores.HighScores.new();
    }
  };
  (high_scores.HighScores.new = function() {
    high_scores.HighScores.__proto__.new.call(this);
    ;
  }).prototype = high_scores.HighScores.prototype;
  dart.addTypeTests(high_scores.HighScores);
  dart.addTypeCaches(high_scores.HighScores);
  dart.setMethodSignature(high_scores.HighScores, () => ({
    __proto__: dart.getMethods(high_scores.HighScores.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(high_scores.HighScores, I[5]);
  var name$ = dart.privateName(single_player_game, "Player.name");
  var numWins$ = dart.privateName(single_player_game, "Player.numWins");
  single_player_game.Player = class Player extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      this[name$] = value;
    }
    get numWins() {
      return this[numWins$];
    }
    set numWins(value) {
      this[numWins$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let numWins = opts && 'numWins' in opts ? opts.numWins : null;
      return new single_player_game.Player.new({name: name, numWins: numWins});
    }
  };
  (single_player_game.Player.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let numWins = opts && 'numWins' in opts ? opts.numWins : null;
    this[name$] = name;
    this[numWins$] = numWins;
    ;
  }).prototype = single_player_game.Player.prototype;
  dart.addTypeTests(single_player_game.Player);
  dart.addTypeCaches(single_player_game.Player);
  dart.setLibraryUri(single_player_game.Player, I[6]);
  dart.setFieldSignature(single_player_game.Player, () => ({
    __proto__: dart.getFields(single_player_game.Player.__proto__),
    name: dart.fieldType(core.String),
    numWins: dart.fieldType(core.int)
  }));
  single_player_game.SinglePlayerGamePage = class SinglePlayerGamePage extends framework.StatefulWidget {
    createState() {
      return new single_player_game.SinglePlayerGamePageState.new();
    }
    static ['_#new#tearOff']() {
      return new single_player_game.SinglePlayerGamePage.new();
    }
  };
  (single_player_game.SinglePlayerGamePage.new = function() {
    single_player_game.SinglePlayerGamePage.__proto__.new.call(this);
    ;
  }).prototype = single_player_game.SinglePlayerGamePage.prototype;
  dart.addTypeTests(single_player_game.SinglePlayerGamePage);
  dart.addTypeCaches(single_player_game.SinglePlayerGamePage);
  dart.setMethodSignature(single_player_game.SinglePlayerGamePage, () => ({
    __proto__: dart.getMethods(single_player_game.SinglePlayerGamePage.__proto__),
    createState: dart.fnType(single_player_game.SinglePlayerGamePageState, [])
  }));
  dart.setLibraryUri(single_player_game.SinglePlayerGamePage, I[6]);
  var currentPlayer$ = dart.privateName(single_player_game, "SinglePlayerGamePageState.currentPlayer");
  var board$ = dart.privateName(single_player_game, "SinglePlayerGamePageState.board");
  var statusMessage$ = dart.privateName(single_player_game, "SinglePlayerGamePageState.statusMessage");
  var isAITurn = dart.privateName(single_player_game, "SinglePlayerGamePageState.isAITurn");
  var countdown = dart.privateName(single_player_game, "SinglePlayerGamePageState.countdown");
  var isCountdownActive = dart.privateName(single_player_game, "SinglePlayerGamePageState.isCountdownActive");
  var countdownTimer = dart.privateName(single_player_game, "SinglePlayerGamePageState.countdownTimer");
  var _startCountdown = dart.privateName(single_player_game, "_startCountdown");
  var _handleTap$ = dart.privateName(single_player_game, "_handleTap");
  var _startNewRound = dart.privateName(single_player_game, "_startNewRound");
  var _checkWinner$ = dart.privateName(single_player_game, "_checkWinner");
  var _isDraw$ = dart.privateName(single_player_game, "_isDraw");
  var _makeMove = dart.privateName(single_player_game, "_makeMove");
  var _checkGameResult = dart.privateName(single_player_game, "_checkGameResult");
  var _getAIMove = dart.privateName(single_player_game, "_getAIMove");
  var _saveWinsToCSV = dart.privateName(single_player_game, "_saveWinsToCSV");
  var _getFilePath = dart.privateName(single_player_game, "_getFilePath");
  single_player_game.SinglePlayerGamePageState = class SinglePlayerGamePageState extends framework.State$(single_player_game.SinglePlayerGamePage) {
    get currentPlayer() {
      return this[currentPlayer$];
    }
    set currentPlayer(value) {
      this[currentPlayer$] = value;
    }
    get board() {
      return this[board$];
    }
    set board(value) {
      this[board$] = value;
    }
    get statusMessage() {
      return this[statusMessage$];
    }
    set statusMessage(value) {
      this[statusMessage$] = value;
    }
    get isAITurn() {
      return this[isAITurn];
    }
    set isAITurn(value) {
      this[isAITurn] = value;
    }
    get countdown() {
      return this[countdown];
    }
    set countdown(value) {
      this[countdown] = value;
    }
    get isCountdownActive() {
      return this[isCountdownActive];
    }
    set isCountdownActive(value) {
      this[isCountdownActive] = value;
    }
    get countdownTimer() {
      return this[countdownTimer];
    }
    set countdownTimer(value) {
      this[countdownTimer] = value;
    }
    initState() {
      super.initState();
      this[_startCountdown]();
    }
    dispose() {
      let t0;
      t0 = this.countdownTimer;
      t0 == null ? null : t0.cancel();
      super.dispose();
    }
    build(context) {
      let screenSize = media_query.MediaQuery.of(context).size;
      let gridDimension = screenSize.width < screenSize.height ? screenSize.width * 0.8 : screenSize.height * 0.8;
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[8] || CT.C8}), body: new basic.Center.new({child: new basic.ConstrainedBox.new({constraints: new box.BoxConstraints.new({maxWidth: gridDimension, maxHeight: gridDimension}), child: new basic.Column.new({children: (() => {
                let t0 = T.JSArrayOfWidget().of([new basic.Expanded.new({child: new scroll_view.GridView.builder({padding: C[9] || CT.C9, gridDelegate: C[10] || CT.C10, itemCount: 9, itemBuilder: dart.fn((context, index) => new ink_well.InkWell.new({onTap: dart.fn(() => this[_handleTap$](index), T.VoidTovoid()), child: new grid_tile.GridTile.new({child: new container.Container.new({decoration: new box_decoration.BoxDecoration.new({border: box_border.Border.all()}), child: new basic.Center.new({child: this.board[$_get](index)[$isEmpty] ? null : new image.Image.asset("assets/icons/" + this.board[$_get](index) + ".png", {fit: box_fit.BoxFit.cover})})})})}), T.BuildContextAndintToInkWell())})}), new basic.Padding.new({padding: C[11] || CT.C11, child: new basic.Column.new({children: T.JSArrayOfWidget().of([new text.Text.new("Player: " + this.currentPlayer.name, {style: C[25] || CT.C25}), new text.Text.new("Wins: " + dart.str(this.currentPlayer.numWins), {style: C[25] || CT.C25}), new text.Text.new(this.statusMessage, {style: C[12] || CT.C12})])})})]);
                if (this.isCountdownActive) t0.push(new text.Text.new("Next round starts in " + dart.str(this.countdown) + " seconds", {style: new text_style.TextStyle.new({fontSize: 18})}));
                return t0;
              })()})})}), bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[14] || CT.C14, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[16] || CT.C16, onPressed: dart.fn(() => {
                  navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new options_screen.OptionsScreen.new(), T.BuildContextToOptionsScreen())}));
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[18] || CT.C18, onPressed: dart.fn(() => {
                  if (!this.isCountdownActive) {
                    this[_startNewRound]();
                  }
                }, T.VoidTovoid())})])})})});
    }
    [_handleTap$](index) {
      if (!this.isAITurn && !this.isCountdownActive) {
        if (this.board[$_get](index) === "" && !this[_checkWinner$]("X") && !this[_checkWinner$]("O") && !this[_isDraw$]()) {
          this[_makeMove](index, "X");
          this[_checkGameResult]();
          this.isAITurn = true;
          T.FutureOfNull().delayed(new core.Duration.new({seconds: 1}), dart.fn(() => {
            if (!this[_checkWinner$]("X") && !this[_checkWinner$]("O") && !this[_isDraw$]()) {
              let aiMove = this[_getAIMove]();
              this[_makeMove](aiMove, "O");
              this[_checkGameResult]();
              this.isAITurn = false;
            }
          }, T.VoidToNull()));
        }
      }
    }
    [_makeMove](index, player) {
      this.setState(dart.fn(() => {
        this.board[$_set](index, player);
      }, T.VoidTovoid()));
    }
    [_checkGameResult]() {
      if (this[_checkWinner$]("X")) {
        this.statusMessage = this.currentPlayer.name + " Wins!";
        this[_saveWinsToCSV]();
        this.setState(dart.fn(() => {
          let t1;
          t1 = this.currentPlayer;
          t1.numWins = t1.numWins + 1;
        }, T.VoidTovoid()));
        this[_startNewRound]();
      } else if (this[_checkWinner$]("O")) {
        this.statusMessage = "AI Wins!";
        this[_startNewRound]();
      } else if (this[_isDraw$]()) {
        this.statusMessage = "Game is a Draw!";
        this[_startNewRound]();
      }
    }
    [_checkWinner$](player) {
      for (let i = 0; i < 3; i = i + 1) {
        if (this.board[$_get](i * 3) === player && this.board[$_get](i * 3 + 1) === player && this.board[$_get](i * 3 + 2) === player) {
          return true;
        }
        if (this.board[$_get](i) === player && this.board[$_get](i + 3) === player && this.board[$_get](i + 6) === player) {
          return true;
        }
      }
      if (this.board[$_get](0) === player && this.board[$_get](4) === player && this.board[$_get](8) === player) {
        return true;
      }
      if (this.board[$_get](2) === player && this.board[$_get](4) === player && this.board[$_get](6) === player) {
        return true;
      }
      return false;
    }
    [_isDraw$]() {
      return !this.board[$contains]("");
    }
    [_startCountdown]() {
      this.countdownTimer = async.Timer.periodic(new core.Duration.new({seconds: 1}), dart.fn(timer => {
        if (this.countdown > 1) {
          this.setState(dart.fn(() => {
            this.countdown = this.countdown - 1;
          }, T.VoidTovoid()));
        } else {
          this.setState(dart.fn(() => {
            this.isCountdownActive = false;
          }, T.VoidTovoid()));
          timer.cancel();
        }
      }, T.TimerTovoid()));
    }
    [_startNewRound]() {
      this.setState(dart.fn(() => {
        this.board = T.ListOfString().filled(9, "");
        this.isCountdownActive = true;
        this.countdown = 3;
        this[_startCountdown]();
      }, T.VoidTovoid()));
    }
    [_getAIMove]() {
      let availableMoves = T.JSArrayOfint().of([]);
      for (let i = 0; i < this.board[$length]; i = i + 1) {
        if (this.board[$_get](i) === "") {
          availableMoves[$add](i);
        }
      }
      if (availableMoves[$isNotEmpty]) {
        return availableMoves[$_get](math.Random.new().nextInt(availableMoves[$length]));
      }
      return -1;
    }
    [_saveWinsToCSV]() {
      return async.async(dart.void, (function* _saveWinsToCSV() {
        let rows = T.JSArrayOfList().of([]);
        let file = io.File.new(yield this[_getFilePath]());
        let fileExists = (yield file.exists());
        if (fileExists) {
          let content = (yield file.readAsString());
          let existingRows = new csv$.CsvToListConverter.new().convert(dart.dynamic, content);
          rows[$addAll](existingRows);
        }
        rows[$add]([this.currentPlayer.name, this.currentPlayer.numWins]);
        let csvContent = new csv$.ListToCsvConverter.new().convert(rows);
        yield file.writeAsString(csvContent);
      }).bind(this));
    }
    [_getFilePath]() {
      return async.async(core.String, function* _getFilePath() {
        let directory = (yield path_provider.getApplicationDocumentsDirectory());
        return directory.path + "/player_wins.csv";
      });
    }
    static ['_#new#tearOff']() {
      return new single_player_game.SinglePlayerGamePageState.new();
    }
  };
  (single_player_game.SinglePlayerGamePageState.new = function() {
    this[currentPlayer$] = new single_player_game.Player.new({name: "Player X", numWins: 0});
    this[board$] = T.ListOfString().filled(9, "");
    this[statusMessage$] = "Current Player: X";
    this[isAITurn] = false;
    this[countdown] = 3;
    this[isCountdownActive] = true;
    this[countdownTimer] = null;
    single_player_game.SinglePlayerGamePageState.__proto__.new.call(this);
    ;
  }).prototype = single_player_game.SinglePlayerGamePageState.prototype;
  dart.addTypeTests(single_player_game.SinglePlayerGamePageState);
  dart.addTypeCaches(single_player_game.SinglePlayerGamePageState);
  dart.setMethodSignature(single_player_game.SinglePlayerGamePageState, () => ({
    __proto__: dart.getMethods(single_player_game.SinglePlayerGamePageState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_handleTap$]: dart.fnType(dart.void, [core.int]),
    [_makeMove]: dart.fnType(dart.void, [core.int, core.String]),
    [_checkGameResult]: dart.fnType(dart.void, []),
    [_checkWinner$]: dart.fnType(core.bool, [core.String]),
    [_isDraw$]: dart.fnType(core.bool, []),
    [_startCountdown]: dart.fnType(dart.void, []),
    [_startNewRound]: dart.fnType(dart.void, []),
    [_getAIMove]: dart.fnType(core.int, []),
    [_saveWinsToCSV]: dart.fnType(dart.void, []),
    [_getFilePath]: dart.fnType(async.Future$(core.String), [])
  }));
  dart.setLibraryUri(single_player_game.SinglePlayerGamePageState, I[6]);
  dart.setFieldSignature(single_player_game.SinglePlayerGamePageState, () => ({
    __proto__: dart.getFields(single_player_game.SinglePlayerGamePageState.__proto__),
    currentPlayer: dart.fieldType(single_player_game.Player),
    board: dart.fieldType(core.List$(core.String)),
    statusMessage: dart.fieldType(core.String),
    isAITurn: dart.fieldType(core.bool),
    countdown: dart.fieldType(core.int),
    isCountdownActive: dart.fieldType(core.bool),
    countdownTimer: dart.fieldType(dart.nullable(async.Timer))
  }));
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  csv$.EmptyValue = class EmptyValue extends core._Enum {
    [_enumToString]() {
      return "EmptyValue." + this[_name];
    }
  };
  (csv$.EmptyValue.new = function(index, name) {
    csv$.EmptyValue.__proto__.new.call(this, index, name);
    ;
  }).prototype = csv$.EmptyValue.prototype;
  dart.addTypeTests(csv$.EmptyValue);
  dart.addTypeCaches(csv$.EmptyValue);
  dart.setMethodSignature(csv$.EmptyValue, () => ({
    __proto__: dart.getMethods(csv$.EmptyValue.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(csv$.EmptyValue, I[7]);
  dart.setStaticFieldSignature(csv$.EmptyValue, () => ['values', 'NULL']);
  dart.defineLazy(csv$.EmptyValue, {
    /*csv$.EmptyValue.values*/get values() {
      return C[26] || CT.C26;
    },
    /*csv$.EmptyValue.NULL*/get NULL() {
      return C[27] || CT.C27;
    }
  }, false);
  var decoder = dart.privateName(csv$, "CsvCodec.decoder");
  var encoder = dart.privateName(csv$, "CsvCodec.encoder");
  csv$.CsvCodec = class CsvCodec extends core.Object {
    get decoder() {
      return this[decoder];
    }
    set decoder(value) {
      super.decoder = value;
    }
    get encoder() {
      return this[encoder];
    }
    set encoder(value) {
      super.encoder = value;
    }
    static ['_#new#tearOff'](opts) {
      let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : ",";
      let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : "\"";
      let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
      let eol = opts && 'eol' in opts ? opts.eol : "\r\n";
      let shouldParseNumbers = opts && 'shouldParseNumbers' in opts ? opts.shouldParseNumbers : true;
      let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : true;
      let delimitAllFields = opts && 'delimitAllFields' in opts ? opts.delimitAllFields : false;
      let convertNullTo = opts && 'convertNullTo' in opts ? opts.convertNullTo : null;
      let convertEmptyTo = opts && 'convertEmptyTo' in opts ? opts.convertEmptyTo : null;
      return new csv$.CsvCodec.new({fieldDelimiter: fieldDelimiter, textDelimiter: textDelimiter, textEndDelimiter: textEndDelimiter, eol: eol, shouldParseNumbers: shouldParseNumbers, allowInvalid: allowInvalid, delimitAllFields: delimitAllFields, convertNullTo: convertNullTo, convertEmptyTo: convertEmptyTo});
    }
  };
  (csv$.CsvCodec.new = function(opts) {
    let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : ",";
    let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : "\"";
    let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
    let eol = opts && 'eol' in opts ? opts.eol : "\r\n";
    let shouldParseNumbers = opts && 'shouldParseNumbers' in opts ? opts.shouldParseNumbers : true;
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : true;
    let delimitAllFields = opts && 'delimitAllFields' in opts ? opts.delimitAllFields : false;
    let convertNullTo = opts && 'convertNullTo' in opts ? opts.convertNullTo : null;
    let convertEmptyTo = opts && 'convertEmptyTo' in opts ? opts.convertEmptyTo : null;
    this[decoder] = new csv$.CsvToListConverter.new({fieldDelimiter: fieldDelimiter, textDelimiter: textDelimiter, textEndDelimiter: textEndDelimiter, eol: eol, shouldParseNumbers: shouldParseNumbers, allowInvalid: allowInvalid, convertEmptyTo: convertEmptyTo});
    this[encoder] = new csv$.ListToCsvConverter.new({fieldDelimiter: fieldDelimiter, textDelimiter: textDelimiter, textEndDelimiter: textEndDelimiter, eol: eol, delimitAllFields: delimitAllFields, convertNullTo: convertNullTo});
    ;
  }).prototype = csv$.CsvCodec.prototype;
  dart.addTypeTests(csv$.CsvCodec);
  dart.addTypeCaches(csv$.CsvCodec);
  dart.setLibraryUri(csv$.CsvCodec, I[7]);
  dart.setFieldSignature(csv$.CsvCodec, () => ({
    __proto__: dart.getFields(csv$.CsvCodec.__proto__),
    decoder: dart.finalFieldType(csv$.CsvToListConverter),
    encoder: dart.finalFieldType(csv$.ListToCsvConverter)
  }));
  var fieldDelimiter$ = dart.privateName(csv$, "CsvToListConverter.fieldDelimiter");
  var textDelimiter$ = dart.privateName(csv$, "CsvToListConverter.textDelimiter");
  var textEndDelimiter$ = dart.privateName(csv$, "CsvToListConverter.textEndDelimiter");
  var eol$ = dart.privateName(csv$, "CsvToListConverter.eol");
  var shouldParseNumbers$ = dart.privateName(csv$, "CsvToListConverter.shouldParseNumbers");
  var allowInvalid$ = dart.privateName(csv$, "CsvToListConverter.allowInvalid");
  var convertEmptyTo$ = dart.privateName(csv$, "CsvToListConverter.convertEmptyTo");
  var csvSettingsDetector$ = dart.privateName(csv$, "CsvToListConverter.csvSettingsDetector");
  csv$.CsvToListConverter = class CsvToListConverter extends async.StreamTransformerBase$(core.String, core.List) {
    get fieldDelimiter() {
      return this[fieldDelimiter$];
    }
    set fieldDelimiter(value) {
      super.fieldDelimiter = value;
    }
    get textDelimiter() {
      return this[textDelimiter$];
    }
    set textDelimiter(value) {
      super.textDelimiter = value;
    }
    get textEndDelimiter() {
      return this[textEndDelimiter$];
    }
    set textEndDelimiter(value) {
      super.textEndDelimiter = value;
    }
    get eol() {
      return this[eol$];
    }
    set eol(value) {
      super.eol = value;
    }
    get shouldParseNumbers() {
      return this[shouldParseNumbers$];
    }
    set shouldParseNumbers(value) {
      super.shouldParseNumbers = value;
    }
    get allowInvalid() {
      return this[allowInvalid$];
    }
    set allowInvalid(value) {
      super.allowInvalid = value;
    }
    get convertEmptyTo() {
      return this[convertEmptyTo$];
    }
    set convertEmptyTo(value) {
      super.convertEmptyTo = value;
    }
    get csvSettingsDetector() {
      return this[csvSettingsDetector$];
    }
    set csvSettingsDetector(value) {
      super.csvSettingsDetector = value;
    }
    static ['_#new#tearOff'](opts) {
      let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : ",";
      let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : "\"";
      let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
      let eol = opts && 'eol' in opts ? opts.eol : "\r\n";
      let csvSettingsDetector = opts && 'csvSettingsDetector' in opts ? opts.csvSettingsDetector : null;
      let shouldParseNumbers = opts && 'shouldParseNumbers' in opts ? opts.shouldParseNumbers : null;
      let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
      let convertEmptyTo = opts && 'convertEmptyTo' in opts ? opts.convertEmptyTo : null;
      return new csv$.CsvToListConverter.new({fieldDelimiter: fieldDelimiter, textDelimiter: textDelimiter, textEndDelimiter: textEndDelimiter, eol: eol, csvSettingsDetector: csvSettingsDetector, shouldParseNumbers: shouldParseNumbers, allowInvalid: allowInvalid, convertEmptyTo: convertEmptyTo});
    }
    verifyCurrentSettings(opts) {
      let throwError = opts && 'throwError' in opts ? opts.throwError : null;
      return csv$.CsvToListConverter.verifySettings(this.fieldDelimiter, this.textDelimiter, this.textEndDelimiter, this.eol, {throwError: throwError});
    }
    static verifySettings(fieldDelimiter, textDelimiter, textEndDelimiter, eol, opts) {
      let throwError = opts && 'throwError' in opts ? opts.throwError : null;
      return csv_parser.CsvParser.verifySettings(fieldDelimiter, textDelimiter, textEndDelimiter, eol);
    }
    startChunkedConversion(outputSink) {
      core.Sink.as(outputSink);
      return new csv$.CsvToListSink.new(T.SinkOfList().as(outputSink), this.fieldDelimiter, this.textDelimiter, this.textEndDelimiter, this.eol, this.csvSettingsDetector, this.shouldParseNumbers, this.allowInvalid, this.convertEmptyTo);
    }
    convert(E, csv, opts) {
      let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : null;
      let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : null;
      let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
      let eol = opts && 'eol' in opts ? opts.eol : null;
      let csvSettingsDetector = opts && 'csvSettingsDetector' in opts ? opts.csvSettingsDetector : null;
      let shouldParseNumbers = opts && 'shouldParseNumbers' in opts ? opts.shouldParseNumbers : null;
      let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
      let convertEmptyTo = opts && 'convertEmptyTo' in opts ? opts.convertEmptyTo : null;
      fieldDelimiter == null ? fieldDelimiter = this.fieldDelimiter : null;
      textDelimiter == null ? textDelimiter = this.textDelimiter : null;
      textEndDelimiter == null ? textEndDelimiter = this.textEndDelimiter : null;
      eol == null ? eol = this.eol : null;
      csvSettingsDetector == null ? csvSettingsDetector = this.csvSettingsDetector : null;
      shouldParseNumbers == null ? shouldParseNumbers = this.shouldParseNumbers : null;
      if (!(dart.test(shouldParseNumbers) ? dart.wrapType(E)._equals(dart.wrapType(dart.dynamic)) : true)) dart.assertFailed(null, I[8], 121, 12, "shouldParseNumbers ? E == dynamic : true");
      allowInvalid == null ? allowInvalid = this.allowInvalid : null;
      convertEmptyTo == null ? convertEmptyTo = this.convertEmptyTo : null;
      let parser = dart.nullCheck(csv$._buildNewParserWithSettings(T.JSArrayOfStringN().of([csv]), true, csvSettingsDetector, fieldDelimiter, textDelimiter, textEndDelimiter, eol, shouldParseNumbers, allowInvalid, convertEmptyTo));
      return parser.convert(E, csv);
    }
    bind(stream) {
      T.StreamOfString().as(stream);
      return T.StreamOfList().eventTransformed(stream, dart.fn(sink => new complex_converter.ComplexConverterStreamEventSink.new(this, sink), T.EventSinkToComplexConverterStreamEventSink()));
    }
  };
  (csv$.CsvToListConverter.new = function(opts) {
    let t3, t3$, t3$0;
    let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : ",";
    let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : "\"";
    let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
    let eol = opts && 'eol' in opts ? opts.eol : "\r\n";
    let csvSettingsDetector = opts && 'csvSettingsDetector' in opts ? opts.csvSettingsDetector : null;
    let shouldParseNumbers = opts && 'shouldParseNumbers' in opts ? opts.shouldParseNumbers : null;
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
    let convertEmptyTo = opts && 'convertEmptyTo' in opts ? opts.convertEmptyTo : null;
    this[fieldDelimiter$] = fieldDelimiter;
    this[eol$] = eol;
    this[csvSettingsDetector$] = csvSettingsDetector;
    this[convertEmptyTo$] = convertEmptyTo;
    this[textDelimiter$] = textDelimiter;
    this[textEndDelimiter$] = (t3 = textEndDelimiter, t3 == null ? textDelimiter : t3);
    this[shouldParseNumbers$] = (t3$ = shouldParseNumbers, t3$ == null ? true : t3$);
    this[allowInvalid$] = (t3$0 = allowInvalid, t3$0 == null ? true : t3$0);
    csv$.CsvToListConverter.__proto__.new.call(this);
    ;
  }).prototype = csv$.CsvToListConverter.prototype;
  dart.addTypeTests(csv$.CsvToListConverter);
  dart.addTypeCaches(csv$.CsvToListConverter);
  csv$.CsvToListConverter[dart.implements] = () => [complex_converter.ComplexChunkedConverter$(core.String, core.List$(core.List))];
  dart.setMethodSignature(csv$.CsvToListConverter, () => ({
    __proto__: dart.getMethods(csv$.CsvToListConverter.__proto__),
    verifyCurrentSettings: dart.fnType(core.List$(core.ArgumentError), [], {throwError: dart.nullable(core.bool)}, {}),
    startChunkedConversion: dart.fnType(csv$.CsvToListSink, [dart.nullable(core.Object)]),
    convert: dart.gFnType(E => [core.List$(core.List$(E)), [dart.nullable(core.String)], {allowInvalid: dart.nullable(core.bool), convertEmptyTo: dart.dynamic, csvSettingsDetector: dart.nullable(csv_settings_autodetection.CsvSettingsDetector), eol: dart.nullable(core.String), fieldDelimiter: dart.nullable(core.String), shouldParseNumbers: dart.nullable(core.bool), textDelimiter: dart.nullable(core.String), textEndDelimiter: dart.nullable(core.String)}, {}], E => [dart.dynamic]),
    bind: dart.fnType(async.Stream$(core.List), [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(csv$.CsvToListConverter, () => ['verifySettings']);
  dart.setLibraryUri(csv$.CsvToListConverter, I[7]);
  dart.setFieldSignature(csv$.CsvToListConverter, () => ({
    __proto__: dart.getFields(csv$.CsvToListConverter.__proto__),
    fieldDelimiter: dart.finalFieldType(dart.nullable(core.String)),
    textDelimiter: dart.finalFieldType(dart.nullable(core.String)),
    textEndDelimiter: dart.finalFieldType(dart.nullable(core.String)),
    eol: dart.finalFieldType(dart.nullable(core.String)),
    shouldParseNumbers: dart.finalFieldType(core.bool),
    allowInvalid: dart.finalFieldType(core.bool),
    convertEmptyTo: dart.finalFieldType(dart.dynamic),
    csvSettingsDetector: dart.finalFieldType(dart.nullable(csv_settings_autodetection.CsvSettingsDetector))
  }));
  var _parser = dart.privateName(csv$, "_parser");
  var _outSink$ = dart.privateName(csv$, "_outSink");
  var _fieldDelimiter$ = dart.privateName(csv$, "_fieldDelimiter");
  var _textDelimiter$ = dart.privateName(csv$, "_textDelimiter");
  var _textEndDelimiter$ = dart.privateName(csv$, "_textEndDelimiter");
  var _eol$ = dart.privateName(csv$, "_eol");
  var _csvSettingsDetector$ = dart.privateName(csv$, "_csvSettingsDetector");
  var _shouldParseNumbers$ = dart.privateName(csv$, "_shouldParseNumbers");
  var _allowInvalid$ = dart.privateName(csv$, "_allowInvalid");
  var _convertEmptyTo$ = dart.privateName(csv$, "_convertEmptyTo");
  var _currentRow = dart.privateName(csv$, "_currentRow");
  var _unparsedCsvChunks = dart.privateName(csv$, "_unparsedCsvChunks");
  var _add = dart.privateName(csv$, "_add");
  csv$.CsvToListSink = class CsvToListSink extends core.Object {
    static ['_#new#tearOff'](_outSink, _fieldDelimiter, _textDelimiter, _textEndDelimiter, _eol, _csvSettingsDetector, _shouldParseNumbers, _allowInvalid, _convertEmptyTo) {
      return new csv$.CsvToListSink.new(_outSink, _fieldDelimiter, _textDelimiter, _textEndDelimiter, _eol, _csvSettingsDetector, _shouldParseNumbers, _allowInvalid, _convertEmptyTo);
    }
    [_add](newCsvChunk, opts) {
      let fieldCompleteWhenEndOfString = opts && 'fieldCompleteWhenEndOfString' in opts ? opts.fieldCompleteWhenEndOfString : null;
      newCsvChunk == null ? newCsvChunk = "" : null;
      this[_unparsedCsvChunks][$add](newCsvChunk);
      if (this[_parser] == null) {
        this[_parser] = csv$._buildNewParserWithSettings(this[_unparsedCsvChunks], fieldCompleteWhenEndOfString, this[_csvSettingsDetector$], this[_fieldDelimiter$], this[_textDelimiter$], this[_textEndDelimiter$], this[_eol$], this[_shouldParseNumbers$], this[_allowInvalid$], this[_convertEmptyTo$]);
        if (!(this[_parser] != null || !dart.nullCheck(fieldCompleteWhenEndOfString))) dart.assertFailed(null, I[8], 234, 14, "_parser != null || !fieldCompleteWhenEndOfString!");
        if (this[_parser] == null) return;
      }
      for (let i = 0; i < this[_unparsedCsvChunks][$length]; i = i + 1) {
        let csvChunk = this[_unparsedCsvChunks][$_get](i);
        let isLastCsvChunk = i + 1 === this[_unparsedCsvChunks][$length];
        let continueCsv = false;
        for (;;) {
          let end = isLastCsvChunk && dart.nullCheck(fieldCompleteWhenEndOfString);
          let result = dart.nullCheck(this[_parser]).convertRow(dart.dynamic, csvChunk, this[_currentRow], {continueCsv: continueCsv, fieldCompleteWhenEndOfString: end});
          continueCsv = true;
          if (result.stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString)) {
            if (this[_currentRow][$isNotEmpty] && end) {
              this[_outSink$].add(this[_currentRow]);
            }
            break;
          }
          this[_outSink$].add(this[_currentRow]);
          this[_currentRow] = [];
        }
      }
      this[_unparsedCsvChunks][$clear]();
    }
    add(csvChunk) {
      core.String.as(csvChunk);
      this[_add](csvChunk, {fieldCompleteWhenEndOfString: false});
    }
    close() {
      this[_add](null, {fieldCompleteWhenEndOfString: true});
      this[_outSink$].close();
    }
  };
  (csv$.CsvToListSink.new = function(_outSink, _fieldDelimiter, _textDelimiter, _textEndDelimiter, _eol, _csvSettingsDetector, _shouldParseNumbers, _allowInvalid, _convertEmptyTo) {
    this[_parser] = null;
    this[_outSink$] = _outSink;
    this[_fieldDelimiter$] = _fieldDelimiter;
    this[_textDelimiter$] = _textDelimiter;
    this[_textEndDelimiter$] = _textEndDelimiter;
    this[_eol$] = _eol;
    this[_csvSettingsDetector$] = _csvSettingsDetector;
    this[_shouldParseNumbers$] = _shouldParseNumbers;
    this[_allowInvalid$] = _allowInvalid;
    this[_convertEmptyTo$] = _convertEmptyTo;
    this[_currentRow] = [];
    this[_unparsedCsvChunks] = T.JSArrayOfStringN().of([]);
    ;
  }).prototype = csv$.CsvToListSink.prototype;
  dart.addTypeTests(csv$.CsvToListSink);
  dart.addTypeCaches(csv$.CsvToListSink);
  csv$.CsvToListSink[dart.implements] = () => [convert.ChunkedConversionSink$(core.String)];
  dart.setMethodSignature(csv$.CsvToListSink, () => ({
    __proto__: dart.getMethods(csv$.CsvToListSink.__proto__),
    [_add]: dart.fnType(dart.void, [dart.nullable(core.String)], {fieldCompleteWhenEndOfString: dart.nullable(core.bool)}, {}),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(csv$.CsvToListSink, I[7]);
  dart.setFieldSignature(csv$.CsvToListSink, () => ({
    __proto__: dart.getFields(csv$.CsvToListSink.__proto__),
    [_outSink$]: dart.finalFieldType(core.Sink$(core.List)),
    [_parser]: dart.fieldType(dart.nullable(csv_parser.CsvParser)),
    [_unparsedCsvChunks]: dart.finalFieldType(core.List$(dart.nullable(core.String))),
    [_currentRow]: dart.fieldType(core.List),
    [_fieldDelimiter$]: dart.finalFieldType(dart.nullable(core.String)),
    [_textDelimiter$]: dart.finalFieldType(dart.nullable(core.String)),
    [_textEndDelimiter$]: dart.finalFieldType(dart.nullable(core.String)),
    [_eol$]: dart.finalFieldType(dart.nullable(core.String)),
    [_csvSettingsDetector$]: dart.finalFieldType(dart.nullable(csv_settings_autodetection.CsvSettingsDetector)),
    [_shouldParseNumbers$]: dart.finalFieldType(core.bool),
    [_allowInvalid$]: dart.finalFieldType(core.bool),
    [_convertEmptyTo$]: dart.finalFieldType(dart.dynamic)
  }));
  var fieldDelimiter$0 = dart.privateName(csv$, "ListToCsvConverter.fieldDelimiter");
  var textDelimiter$0 = dart.privateName(csv$, "ListToCsvConverter.textDelimiter");
  var textEndDelimiter$0 = dart.privateName(csv$, "ListToCsvConverter.textEndDelimiter");
  var eol$0 = dart.privateName(csv$, "ListToCsvConverter.eol");
  var delimitAllFields$ = dart.privateName(csv$, "ListToCsvConverter.delimitAllFields");
  var convertNullTo$ = dart.privateName(csv$, "ListToCsvConverter.convertNullTo");
  var _containsAny = dart.privateName(csv$, "_containsAny");
  csv$.ListToCsvConverter = class ListToCsvConverter extends async.StreamTransformerBase$(core.List, core.String) {
    get fieldDelimiter() {
      return this[fieldDelimiter$0];
    }
    set fieldDelimiter(value) {
      super.fieldDelimiter = value;
    }
    get textDelimiter() {
      return this[textDelimiter$0];
    }
    set textDelimiter(value) {
      super.textDelimiter = value;
    }
    get textEndDelimiter() {
      return this[textEndDelimiter$0];
    }
    set textEndDelimiter(value) {
      super.textEndDelimiter = value;
    }
    get eol() {
      return this[eol$0];
    }
    set eol(value) {
      super.eol = value;
    }
    get delimitAllFields() {
      return this[delimitAllFields$];
    }
    set delimitAllFields(value) {
      super.delimitAllFields = value;
    }
    get convertNullTo() {
      return this[convertNullTo$];
    }
    set convertNullTo(value) {
      super.convertNullTo = value;
    }
    static ['_#new#tearOff'](opts) {
      let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : ",";
      let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : "\"";
      let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
      let eol = opts && 'eol' in opts ? opts.eol : "\r\n";
      let delimitAllFields = opts && 'delimitAllFields' in opts ? opts.delimitAllFields : false;
      let convertNullTo = opts && 'convertNullTo' in opts ? opts.convertNullTo : null;
      return new csv$.ListToCsvConverter.new({fieldDelimiter: fieldDelimiter, textDelimiter: textDelimiter, textEndDelimiter: textEndDelimiter, eol: eol, delimitAllFields: delimitAllFields, convertNullTo: convertNullTo});
    }
    convert(rows, opts) {
      let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : null;
      let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : null;
      let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
      let eol = opts && 'eol' in opts ? opts.eol : null;
      let delimitAllFields = opts && 'delimitAllFields' in opts ? opts.delimitAllFields : null;
      let convertNullTo = opts && 'convertNullTo' in opts ? opts.convertNullTo : null;
      if (rows == null) return "";
      eol == null ? eol = this.eol : null;
      let sb = new core.StringBuffer.new();
      let sep = "";
      rows[$forEach](dart.fn(r => {
        sb.write(sep);
        sep = eol;
        this.convertSingleRow(sb, r, {fieldDelimiter: fieldDelimiter, textDelimiter: textDelimiter, textEndDelimiter: textEndDelimiter, eol: eol, delimitAllFields: delimitAllFields, convertNullTo: convertNullTo, returnString: false});
      }, T.ListNTovoid()));
      return sb.toString();
    }
    startChunkedConversion(outputSink) {
      T.SinkOfString().as(outputSink);
      return new csv$.List2CsvSink.new(this, outputSink);
    }
    convertSingleRow(sb, rowValues, opts) {
      let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : null;
      let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : null;
      let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
      let eol = opts && 'eol' in opts ? opts.eol : null;
      let delimitAllFields = opts && 'delimitAllFields' in opts ? opts.delimitAllFields : null;
      let convertNullTo = opts && 'convertNullTo' in opts ? opts.convertNullTo : null;
      let returnString = opts && 'returnString' in opts ? opts.returnString : true;
      if (rowValues == null || rowValues[$isEmpty]) return "";
      fieldDelimiter == null ? fieldDelimiter = this.fieldDelimiter : null;
      textEndDelimiter == null ? textEndDelimiter = textDelimiter : null;
      textDelimiter == null ? textDelimiter = this.textDelimiter : null;
      textEndDelimiter == null ? textEndDelimiter = this.textEndDelimiter : null;
      eol == null ? eol = this.eol : null;
      delimitAllFields == null ? delimitAllFields = this.delimitAllFields : null;
      convertNullTo == null ? convertNullTo = this.convertNullTo : null;
      if (fieldDelimiter == textDelimiter) {
        dart.throw(new core.ArgumentError.new("Field Delimiter (" + dart.str(fieldDelimiter) + ") and Text Delimiter (" + dart.str(textDelimiter) + ") must not be equal."));
      }
      let fieldDel = "";
      rowValues[$fold](core.StringBuffer, sb, dart.fn((sb, val) => {
        let t3, t3$;
        let valString = convertNullTo != null && val == null ? dart.toString(convertNullTo) : dart.toString(val);
        if (dart.nullCheck(delimitAllFields) || this[_containsAny](valString, T.JSArrayOfStringN().of([fieldDelimiter, textDelimiter, textEndDelimiter, eol]))) {
          if (this[_containsAny](valString, T.JSArrayOfStringN().of([textEndDelimiter]))) {
            let newEndDelimiter = dart.str(textEndDelimiter) + dart.str(textEndDelimiter);
            valString = valString[$replaceAll](dart.nullCheck(textEndDelimiter), newEndDelimiter);
          }
          t3 = sb;
          (() => {
            t3.write(fieldDel);
            t3.write(textDelimiter);
            t3.write(valString);
            t3.write(textEndDelimiter);
            return t3;
          })();
        } else {
          t3$ = sb;
          (() => {
            t3$.write(fieldDel);
            t3$.write(valString);
            return t3$;
          })();
        }
        fieldDel = fieldDelimiter;
        return sb;
      }, T.StringBufferAnddynamicToStringBuffer()));
      return returnString ? sb.toString() : null;
    }
    [_containsAny](s, charsToSearchFor) {
      let chars = T.LinkedHashSetOfint().new();
      charsToSearchFor[$forEach](dart.fn(word => chars.addAll(dart.nullCheck(word)[$codeUnits]), T.StringNTovoid()));
      let it = s[$codeUnits][$iterator];
      while (it.moveNext()) {
        if (chars.contains(it.current)) return true;
      }
      return false;
    }
    bind(stream) {
      T.StreamOfList().as(stream);
      return T.StreamOfString().eventTransformed(stream, dart.fn(sink => new complex_converter.ComplexConverterStreamEventSink.new(this, sink), T.EventSinkToComplexConverterStreamEventSink()));
    }
  };
  (csv$.ListToCsvConverter.new = function(opts) {
    let t3;
    let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : ",";
    let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : "\"";
    let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
    let eol = opts && 'eol' in opts ? opts.eol : "\r\n";
    let delimitAllFields = opts && 'delimitAllFields' in opts ? opts.delimitAllFields : false;
    let convertNullTo = opts && 'convertNullTo' in opts ? opts.convertNullTo : null;
    this[fieldDelimiter$0] = fieldDelimiter;
    this[eol$0] = eol;
    this[delimitAllFields$] = delimitAllFields;
    this[convertNullTo$] = convertNullTo;
    this[textDelimiter$0] = textDelimiter;
    this[textEndDelimiter$0] = (t3 = textEndDelimiter, t3 == null ? textDelimiter : t3);
    csv$.ListToCsvConverter.__proto__.new.call(this);
    ;
  }).prototype = csv$.ListToCsvConverter.prototype;
  dart.addTypeTests(csv$.ListToCsvConverter);
  dart.addTypeCaches(csv$.ListToCsvConverter);
  csv$.ListToCsvConverter[dart.implements] = () => [complex_converter.ComplexChunkedConverter$(core.List$(core.List), core.String)];
  dart.setMethodSignature(csv$.ListToCsvConverter, () => ({
    __proto__: dart.getMethods(csv$.ListToCsvConverter.__proto__),
    convert: dart.fnType(core.String, [dart.nullable(core.List$(dart.nullable(core.List)))], {convertNullTo: dart.dynamic, delimitAllFields: dart.nullable(core.bool), eol: dart.nullable(core.String), fieldDelimiter: dart.nullable(core.String), textDelimiter: dart.nullable(core.String), textEndDelimiter: dart.nullable(core.String)}, {}),
    startChunkedConversion: dart.fnType(csv$.List2CsvSink, [dart.nullable(core.Object)]),
    convertSingleRow: dart.fnType(dart.nullable(core.String), [core.StringBuffer, dart.nullable(core.List)], {convertNullTo: dart.dynamic, delimitAllFields: dart.nullable(core.bool), eol: dart.nullable(core.String), fieldDelimiter: dart.nullable(core.String), returnString: core.bool, textDelimiter: dart.nullable(core.String), textEndDelimiter: dart.nullable(core.String)}, {}),
    [_containsAny]: dart.fnType(core.bool, [core.String, core.List$(dart.nullable(core.String))]),
    bind: dart.fnType(async.Stream$(core.String), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(csv$.ListToCsvConverter, I[7]);
  dart.setFieldSignature(csv$.ListToCsvConverter, () => ({
    __proto__: dart.getFields(csv$.ListToCsvConverter.__proto__),
    fieldDelimiter: dart.finalFieldType(core.String),
    textDelimiter: dart.finalFieldType(core.String),
    textEndDelimiter: dart.finalFieldType(core.String),
    eol: dart.finalFieldType(core.String),
    delimitAllFields: dart.finalFieldType(core.bool),
    convertNullTo: dart.finalFieldType(dart.dynamic)
  }));
  var _converter$ = dart.privateName(csv$, "_converter");
  csv$.List2CsvSink = class List2CsvSink extends core.Object {
    static ['_#new#tearOff'](_converter, _outSink) {
      return new csv$.List2CsvSink.new(_converter, _outSink);
    }
    add(oneRow) {
      core.List.as(oneRow);
      this[_outSink$].add(this[_converter$].convert(T.JSArrayOfListN().of([oneRow, null])));
    }
    close() {
      this[_outSink$].close();
    }
  };
  (csv$.List2CsvSink.new = function(_converter, _outSink) {
    this[_converter$] = _converter;
    this[_outSink$] = _outSink;
    ;
  }).prototype = csv$.List2CsvSink.prototype;
  dart.addTypeTests(csv$.List2CsvSink);
  dart.addTypeCaches(csv$.List2CsvSink);
  csv$.List2CsvSink[dart.implements] = () => [convert.ChunkedConversionSink$(core.List$(core.List))];
  dart.setMethodSignature(csv$.List2CsvSink, () => ({
    __proto__: dart.getMethods(csv$.List2CsvSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(csv$.List2CsvSink, I[7]);
  dart.setFieldSignature(csv$.List2CsvSink, () => ({
    __proto__: dart.getFields(csv$.List2CsvSink.__proto__),
    [_converter$]: dart.finalFieldType(csv$.ListToCsvConverter),
    [_outSink$]: dart.finalFieldType(core.Sink$(core.String))
  }));
  csv$._buildNewParserWithSettings = function _buildNewParserWithSettings(unparsedCsvChunks, noMoreChunks, csvSettingsDetector, fieldDelimiter, textDelimiter, textEndDelimiter, eol, shouldParseNumbers, allowInvalid, convertEmptyTo) {
    let t3, t3$, t3$0, t3$1;
    if (csvSettingsDetector != null) {
      let settings = csvSettingsDetector.detectFromCsvChunks(unparsedCsvChunks, noMoreChunks);
      if (dart.nullCheck(settings.needMoreData) && !dart.nullCheck(noMoreChunks)) return null;
      fieldDelimiter = (t3 = settings.fieldDelimiter, t3 == null ? fieldDelimiter : t3);
      textDelimiter = (t3$ = settings.textDelimiter, t3$ == null ? textDelimiter : t3$);
      textEndDelimiter = (t3$0 = settings.textEndDelimiter, t3$0 == null ? textEndDelimiter : t3$0);
      eol = (t3$1 = settings.eol, t3$1 == null ? eol : t3$1);
    }
    return new csv_parser.CsvParser.new({fieldDelimiter: fieldDelimiter, textDelimiter: textDelimiter, textEndDelimiter: textEndDelimiter, eol: eol, shouldParseNumbers: shouldParseNumbers, allowInvalid: allowInvalid, convertEmptyTo: convertEmptyTo});
  };
  dart.defineLazy(csv$, {
    /*csv$.defaultFieldDelimiter*/get defaultFieldDelimiter() {
      return ",";
    },
    /*csv$.defaultTextDelimiter*/get defaultTextDelimiter() {
      return "\"";
    },
    /*csv$.defaultEol*/get defaultEol() {
      return "\r\n";
    },
    /*csv$.defaultDelimitAllFields*/get defaultDelimitAllFields() {
      return false;
    }
  }, false);
  var message$ = dart.privateName(path_provider, "MissingPlatformDirectoryException.message");
  var details$ = dart.privateName(path_provider, "MissingPlatformDirectoryException.details");
  path_provider.MissingPlatformDirectoryException = class MissingPlatformDirectoryException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
    static ['_#new#tearOff'](message, opts) {
      let details = opts && 'details' in opts ? opts.details : null;
      return new path_provider.MissingPlatformDirectoryException.new(message, {details: details});
    }
    toString() {
      let detailsAddition = this.details == null ? "" : ": " + dart.str(this.details);
      return "MissingPlatformDirectoryException(" + this.message + ")" + detailsAddition;
    }
  };
  (path_provider.MissingPlatformDirectoryException.new = function(message, opts) {
    let details = opts && 'details' in opts ? opts.details : null;
    this[message$] = message;
    this[details$] = details;
    ;
  }).prototype = path_provider.MissingPlatformDirectoryException.prototype;
  dart.addTypeTests(path_provider.MissingPlatformDirectoryException);
  dart.addTypeCaches(path_provider.MissingPlatformDirectoryException);
  path_provider.MissingPlatformDirectoryException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(path_provider.MissingPlatformDirectoryException, I[9]);
  dart.setFieldSignature(path_provider.MissingPlatformDirectoryException, () => ({
    __proto__: dart.getFields(path_provider.MissingPlatformDirectoryException.__proto__),
    message: dart.finalFieldType(core.String),
    details: dart.finalFieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(path_provider.MissingPlatformDirectoryException, ['toString']);
  path_provider.getTemporaryDirectory = function getTemporaryDirectory() {
    return async.async(io.Directory, function* getTemporaryDirectory() {
      let path = (yield path_provider._platform.getTemporaryPath());
      if (path == null) {
        dart.throw(new path_provider.MissingPlatformDirectoryException.new("Unable to get temporary directory"));
      }
      return io.Directory.new(path);
    });
  };
  path_provider.getApplicationSupportDirectory = function getApplicationSupportDirectory() {
    return async.async(io.Directory, function* getApplicationSupportDirectory() {
      let path = (yield path_provider._platform.getApplicationSupportPath());
      if (path == null) {
        dart.throw(new path_provider.MissingPlatformDirectoryException.new("Unable to get application support directory"));
      }
      return io.Directory.new(path);
    });
  };
  path_provider.getLibraryDirectory = function getLibraryDirectory() {
    return async.async(io.Directory, function* getLibraryDirectory() {
      let path = (yield path_provider._platform.getLibraryPath());
      if (path == null) {
        dart.throw(new path_provider.MissingPlatformDirectoryException.new("Unable to get library directory"));
      }
      return io.Directory.new(path);
    });
  };
  path_provider.getApplicationDocumentsDirectory = function getApplicationDocumentsDirectory() {
    return async.async(io.Directory, function* getApplicationDocumentsDirectory() {
      let path = (yield path_provider._platform.getApplicationDocumentsPath());
      if (path == null) {
        dart.throw(new path_provider.MissingPlatformDirectoryException.new("Unable to get application documents directory"));
      }
      return io.Directory.new(path);
    });
  };
  path_provider.getApplicationCacheDirectory = function getApplicationCacheDirectory() {
    return async.async(io.Directory, function* getApplicationCacheDirectory() {
      let path = (yield path_provider._platform.getApplicationCachePath());
      if (path == null) {
        dart.throw(new path_provider.MissingPlatformDirectoryException.new("Unable to get application cache directory"));
      }
      return io.Directory.new(path);
    });
  };
  path_provider.getExternalStorageDirectory = function getExternalStorageDirectory() {
    return async.async(T.DirectoryN(), function* getExternalStorageDirectory() {
      let path = (yield path_provider._platform.getExternalStoragePath());
      if (path == null) {
        return null;
      }
      return io.Directory.new(path);
    });
  };
  path_provider.getExternalCacheDirectories = function getExternalCacheDirectories() {
    return async.async(T.ListNOfDirectory(), function* getExternalCacheDirectories() {
      let paths = (yield path_provider._platform.getExternalCachePaths());
      if (paths == null) {
        return null;
      }
      return paths[$map](io.Directory, dart.fn(path => io.Directory.new(path), T.StringToDirectory()))[$toList]();
    });
  };
  path_provider.getExternalStorageDirectories = function getExternalStorageDirectories(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    return async.async(T.ListNOfDirectory(), function* getExternalStorageDirectories() {
      let paths = (yield path_provider._platform.getExternalStoragePaths({type: type}));
      if (paths == null) {
        return null;
      }
      return paths[$map](io.Directory, dart.fn(path => io.Directory.new(path), T.StringToDirectory()))[$toList]();
    });
  };
  path_provider.getDownloadsDirectory = function getDownloadsDirectory() {
    return async.async(T.DirectoryN(), function* getDownloadsDirectory() {
      let path = (yield path_provider._platform.getDownloadsPath());
      if (path == null) {
        return null;
      }
      return io.Directory.new(path);
    });
  };
  dart.copyProperties(path_provider, {
    set disablePathProviderPlatformOverride(override) {
    },
    get _platform() {
      return path_provider_platform_interface.PathProviderPlatform.instance;
    }
  });
  var needMoreData$ = dart.privateName(csv_settings_autodetection, "CsvSettings.needMoreData");
  var fieldDelimiter$1 = dart.privateName(csv_settings_autodetection, "CsvSettings.fieldDelimiter");
  var textDelimiter$1 = dart.privateName(csv_settings_autodetection, "CsvSettings.textDelimiter");
  var textEndDelimiter$1 = dart.privateName(csv_settings_autodetection, "CsvSettings.textEndDelimiter");
  var eol$1 = dart.privateName(csv_settings_autodetection, "CsvSettings.eol");
  csv_settings_autodetection.CsvSettings = class CsvSettings extends core.Object {
    get needMoreData() {
      return this[needMoreData$];
    }
    set needMoreData(value) {
      super.needMoreData = value;
    }
    get fieldDelimiter() {
      return this[fieldDelimiter$1];
    }
    set fieldDelimiter(value) {
      super.fieldDelimiter = value;
    }
    get textDelimiter() {
      return this[textDelimiter$1];
    }
    set textDelimiter(value) {
      super.textDelimiter = value;
    }
    get textEndDelimiter() {
      return this[textEndDelimiter$1];
    }
    set textEndDelimiter(value) {
      super.textEndDelimiter = value;
    }
    get eol() {
      return this[eol$1];
    }
    set eol(value) {
      super.eol = value;
    }
    static ['_#new#tearOff'](fieldDelimiter, textDelimiter, textEndDelimiter, eol, needMoreData) {
      return new csv_settings_autodetection.CsvSettings.new(fieldDelimiter, textDelimiter, textEndDelimiter, eol, needMoreData);
    }
  };
  (csv_settings_autodetection.CsvSettings.new = function(fieldDelimiter, textDelimiter, textEndDelimiter, eol, needMoreData) {
    this[fieldDelimiter$1] = fieldDelimiter;
    this[textDelimiter$1] = textDelimiter;
    this[textEndDelimiter$1] = textEndDelimiter;
    this[eol$1] = eol;
    this[needMoreData$] = needMoreData;
    ;
  }).prototype = csv_settings_autodetection.CsvSettings.prototype;
  dart.addTypeTests(csv_settings_autodetection.CsvSettings);
  dart.addTypeCaches(csv_settings_autodetection.CsvSettings);
  dart.setLibraryUri(csv_settings_autodetection.CsvSettings, I[10]);
  dart.setFieldSignature(csv_settings_autodetection.CsvSettings, () => ({
    __proto__: dart.getFields(csv_settings_autodetection.CsvSettings.__proto__),
    needMoreData: dart.finalFieldType(dart.nullable(core.bool)),
    fieldDelimiter: dart.finalFieldType(dart.nullable(core.String)),
    textDelimiter: dart.finalFieldType(dart.nullable(core.String)),
    textEndDelimiter: dart.finalFieldType(dart.nullable(core.String)),
    eol: dart.finalFieldType(dart.nullable(core.String))
  }));
  csv_settings_autodetection.CsvSettingsDetector = class CsvSettingsDetector extends core.Object {
    detectFromCsvChunks(csvChunks, noMoreChunks) {
      let nullToEmpty = dart.fn(chunk => {
        let t3;
        t3 = chunk;
        return t3 == null ? "" : t3;
      }, T.StringNToString());
      return this.detectFromString(csvChunks[$map](core.String, nullToEmpty)[$join]());
    }
  };
  (csv_settings_autodetection.CsvSettingsDetector.new = function() {
    ;
  }).prototype = csv_settings_autodetection.CsvSettingsDetector.prototype;
  dart.addTypeTests(csv_settings_autodetection.CsvSettingsDetector);
  dart.addTypeCaches(csv_settings_autodetection.CsvSettingsDetector);
  dart.setMethodSignature(csv_settings_autodetection.CsvSettingsDetector, () => ({
    __proto__: dart.getMethods(csv_settings_autodetection.CsvSettingsDetector.__proto__),
    detectFromCsvChunks: dart.fnType(csv_settings_autodetection.CsvSettings, [core.List$(dart.nullable(core.String)), dart.nullable(core.bool)])
  }));
  dart.setLibraryUri(csv_settings_autodetection.CsvSettingsDetector, I[10]);
  var fieldDelimiters$ = dart.privateName(csv_settings_autodetection, "FirstOccurrenceSettingsDetector.fieldDelimiters");
  var textDelimiters$ = dart.privateName(csv_settings_autodetection, "FirstOccurrenceSettingsDetector.textDelimiters");
  var textEndDelimiters$ = dart.privateName(csv_settings_autodetection, "FirstOccurrenceSettingsDetector.textEndDelimiters");
  var eols$ = dart.privateName(csv_settings_autodetection, "FirstOccurrenceSettingsDetector.eols");
  csv_settings_autodetection.FirstOccurrenceSettingsDetector = class FirstOccurrenceSettingsDetector extends csv_settings_autodetection.CsvSettingsDetector {
    get fieldDelimiters() {
      return this[fieldDelimiters$];
    }
    set fieldDelimiters(value) {
      super.fieldDelimiters = value;
    }
    get textDelimiters() {
      return this[textDelimiters$];
    }
    set textDelimiters(value) {
      super.textDelimiters = value;
    }
    get textEndDelimiters() {
      return this[textEndDelimiters$];
    }
    set textEndDelimiters(value) {
      super.textEndDelimiters = value;
    }
    get eols() {
      return this[eols$];
    }
    set eols(value) {
      super.eols = value;
    }
    static ['_#new#tearOff'](opts) {
      let fieldDelimiters = opts && 'fieldDelimiters' in opts ? opts.fieldDelimiters : null;
      let textDelimiters = opts && 'textDelimiters' in opts ? opts.textDelimiters : null;
      let textEndDelimiters = opts && 'textEndDelimiters' in opts ? opts.textEndDelimiters : null;
      let eols = opts && 'eols' in opts ? opts.eols : null;
      return new csv_settings_autodetection.FirstOccurrenceSettingsDetector.new({fieldDelimiters: fieldDelimiters, textDelimiters: textDelimiters, textEndDelimiters: textEndDelimiters, eols: eols});
    }
    detectFromString(csv) {
      let needMoreData = false;
      let tryValues = dart.fn(values => {
        let value = null;
        if (values != null && values[$isNotEmpty]) {
          value = csv_settings_autodetection._findFirst(csv, values);
          if (value == null) needMoreData = true;
        }
        return value;
      }, T.ListNOfStringToStringN());
      let fieldDelimiter = tryValues(this.fieldDelimiters);
      let textDelimiter = tryValues(this.textDelimiters);
      let textEndDelimiter = tryValues(this.textEndDelimiters);
      let eol = tryValues(this.eols);
      return new csv_settings_autodetection.CsvSettings.new(fieldDelimiter, textDelimiter, textEndDelimiter, eol, needMoreData);
    }
  };
  (csv_settings_autodetection.FirstOccurrenceSettingsDetector.new = function(opts) {
    let fieldDelimiters = opts && 'fieldDelimiters' in opts ? opts.fieldDelimiters : null;
    let textDelimiters = opts && 'textDelimiters' in opts ? opts.textDelimiters : null;
    let textEndDelimiters = opts && 'textEndDelimiters' in opts ? opts.textEndDelimiters : null;
    let eols = opts && 'eols' in opts ? opts.eols : null;
    this[fieldDelimiters$] = fieldDelimiters;
    this[textDelimiters$] = textDelimiters;
    this[textEndDelimiters$] = textEndDelimiters;
    this[eols$] = eols;
    csv_settings_autodetection.FirstOccurrenceSettingsDetector.__proto__.new.call(this);
    ;
  }).prototype = csv_settings_autodetection.FirstOccurrenceSettingsDetector.prototype;
  dart.addTypeTests(csv_settings_autodetection.FirstOccurrenceSettingsDetector);
  dart.addTypeCaches(csv_settings_autodetection.FirstOccurrenceSettingsDetector);
  dart.setMethodSignature(csv_settings_autodetection.FirstOccurrenceSettingsDetector, () => ({
    __proto__: dart.getMethods(csv_settings_autodetection.FirstOccurrenceSettingsDetector.__proto__),
    detectFromString: dart.fnType(csv_settings_autodetection.CsvSettings, [core.String])
  }));
  dart.setLibraryUri(csv_settings_autodetection.FirstOccurrenceSettingsDetector, I[10]);
  dart.setFieldSignature(csv_settings_autodetection.FirstOccurrenceSettingsDetector, () => ({
    __proto__: dart.getFields(csv_settings_autodetection.FirstOccurrenceSettingsDetector.__proto__),
    fieldDelimiters: dart.finalFieldType(dart.nullable(core.List$(core.String))),
    textDelimiters: dart.finalFieldType(dart.nullable(core.List$(core.String))),
    textEndDelimiters: dart.finalFieldType(dart.nullable(core.List$(core.String))),
    eols: dart.finalFieldType(dart.nullable(core.List$(core.String)))
  }));
  csv_settings_autodetection._findFirst = function _findFirst(csv, possibleValues) {
    csv == null ? csv = "" : null;
    if (possibleValues[$length] === 1) {
      return possibleValues[$first];
    }
    let bestMatchIndex = csv.length;
    let bestMatch = null;
    possibleValues[$forEach](dart.fn(val => {
      let currentIndex = dart.nullCheck(csv)[$indexOf](val);
      if (currentIndex !== -1 && currentIndex < bestMatchIndex) {
        bestMatchIndex = currentIndex;
        bestMatch = val;
      }
    }, T.StringTovoid()));
    return bestMatch;
  };
  const _is_ComplexChunkedConverter_default = Symbol('_is_ComplexChunkedConverter_default');
  complex_converter.ComplexChunkedConverter$ = dart.generic((S, T) => {
    class ComplexChunkedConverter extends core.Object {}
    (ComplexChunkedConverter.new = function() {
      ;
    }).prototype = ComplexChunkedConverter.prototype;
    dart.addTypeTests(ComplexChunkedConverter);
    ComplexChunkedConverter.prototype[_is_ComplexChunkedConverter_default] = true;
    dart.addTypeCaches(ComplexChunkedConverter);
    dart.setLibraryUri(ComplexChunkedConverter, I[11]);
    return ComplexChunkedConverter;
  });
  complex_converter.ComplexChunkedConverter = complex_converter.ComplexChunkedConverter$();
  dart.addTypeTests(complex_converter.ComplexChunkedConverter, _is_ComplexChunkedConverter_default);
  var _eventSink = dart.privateName(complex_converter, "_eventSink");
  var _chunkedSink = dart.privateName(complex_converter, "_chunkedSink");
  const _is_ComplexConverterStreamEventSink_default = Symbol('_is_ComplexConverterStreamEventSink_default');
  complex_converter.ComplexConverterStreamEventSink$ = dart.generic((S, T) => {
    class ComplexConverterStreamEventSink extends core.Object {
      static ['_#new#tearOff'](S, T, converter, sink) {
        return new (complex_converter.ComplexConverterStreamEventSink$(S, T)).new(converter, sink);
      }
      add(o) {
        S.as(o);
        this[_chunkedSink].add(o);
      }
      addError(error, stackTrace = null) {
        this[_eventSink].addError(error, stackTrace);
      }
      close() {
        this[_chunkedSink].close();
      }
    }
    (ComplexConverterStreamEventSink.new = function(converter, sink) {
      this[_eventSink] = sink;
      this[_chunkedSink] = converter.startChunkedConversion(sink);
      ;
    }).prototype = ComplexConverterStreamEventSink.prototype;
    dart.addTypeTests(ComplexConverterStreamEventSink);
    ComplexConverterStreamEventSink.prototype[_is_ComplexConverterStreamEventSink_default] = true;
    dart.addTypeCaches(ComplexConverterStreamEventSink);
    ComplexConverterStreamEventSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(ComplexConverterStreamEventSink, () => ({
      __proto__: dart.getMethods(ComplexConverterStreamEventSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(ComplexConverterStreamEventSink, I[11]);
    dart.setFieldSignature(ComplexConverterStreamEventSink, () => ({
      __proto__: dart.getFields(ComplexConverterStreamEventSink.__proto__),
      [_eventSink]: dart.finalFieldType(async.EventSink$(T)),
      [_chunkedSink]: dart.finalFieldType(core.Sink$(S))
    }));
    return ComplexConverterStreamEventSink;
  });
  complex_converter.ComplexConverterStreamEventSink = complex_converter.ComplexConverterStreamEventSink$();
  dart.addTypeTests(complex_converter.ComplexConverterStreamEventSink, _is_ComplexConverterStreamEventSink_default);
  var fieldDelimiter$2 = dart.privateName(csv_parser, "CsvParser.fieldDelimiter");
  var textDelimiter$2 = dart.privateName(csv_parser, "CsvParser.textDelimiter");
  var textEndDelimiter$2 = dart.privateName(csv_parser, "CsvParser.textEndDelimiter");
  var eol$2 = dart.privateName(csv_parser, "CsvParser.eol");
  var shouldParseNumbers$0 = dart.privateName(csv_parser, "CsvParser.shouldParseNumbers");
  var convertEmptyTo$0 = dart.privateName(csv_parser, "CsvParser.convertEmptyTo");
  var allowInvalid$0 = dart.privateName(csv_parser, "CsvParser.allowInvalid");
  var __CsvParser__field = dart.privateName(csv_parser, "_#CsvParser#_field");
  var _csvText = dart.privateName(csv_parser, "_csvText");
  var _pushbackBuffer = dart.privateName(csv_parser, "_pushbackBuffer");
  var __CsvParser__insideString = dart.privateName(csv_parser, "_#CsvParser#_insideString");
  var _insideQuotedString = dart.privateName(csv_parser, "_insideQuotedString");
  var _previousWasTextEndDelimiter = dart.privateName(csv_parser, "_previousWasTextEndDelimiter");
  var __CsvParser__matchedChars = dart.privateName(csv_parser, "_#CsvParser#_matchedChars");
  var _matchingFieldDelimiter = dart.privateName(csv_parser, "_matchingFieldDelimiter");
  var _matchingTextDelimiter = dart.privateName(csv_parser, "_matchingTextDelimiter");
  var _matchingTextEndDelimiter = dart.privateName(csv_parser, "_matchingTextEndDelimiter");
  var _matchingEol = dart.privateName(csv_parser, "_matchingEol");
  var _currentPos = dart.privateName(csv_parser, "_currentPos");
  var _field = dart.privateName(csv_parser, "_field");
  var _insideString = dart.privateName(csv_parser, "_insideString");
  var _matchedChars = dart.privateName(csv_parser, "_matchedChars");
  var _resetMatcher = dart.privateName(csv_parser, "_resetMatcher");
  var _addTextToField = dart.privateName(csv_parser, "_addTextToField");
  var _parseField = dart.privateName(csv_parser, "_parseField");
  var _parsePushbackBuffer = dart.privateName(csv_parser, "_parsePushbackBuffer");
  var _match = dart.privateName(csv_parser, "_match");
  var _reparseWronglyMatched = dart.privateName(csv_parser, "_reparseWronglyMatched");
  var _consumeTextDelimiter = dart.privateName(csv_parser, "_consumeTextDelimiter");
  var _consumeTextEndDelimiter = dart.privateName(csv_parser, "_consumeTextEndDelimiter");
  var _consumeEol = dart.privateName(csv_parser, "_consumeEol");
  var _consumeFieldDelimiter = dart.privateName(csv_parser, "_consumeFieldDelimiter");
  var _matching = dart.privateName(csv_parser, "_matching");
  var _addValueToRow = dart.privateName(csv_parser, "_addValueToRow");
  csv_parser.CsvParser = class CsvParser extends core.Object {
    get fieldDelimiter() {
      return this[fieldDelimiter$2];
    }
    set fieldDelimiter(value) {
      super.fieldDelimiter = value;
    }
    get textDelimiter() {
      return this[textDelimiter$2];
    }
    set textDelimiter(value) {
      super.textDelimiter = value;
    }
    get textEndDelimiter() {
      return this[textEndDelimiter$2];
    }
    set textEndDelimiter(value) {
      super.textEndDelimiter = value;
    }
    get eol() {
      return this[eol$2];
    }
    set eol(value) {
      super.eol = value;
    }
    get shouldParseNumbers() {
      return this[shouldParseNumbers$0];
    }
    set shouldParseNumbers(value) {
      super.shouldParseNumbers = value;
    }
    get convertEmptyTo() {
      return this[convertEmptyTo$0];
    }
    set convertEmptyTo(value) {
      super.convertEmptyTo = value;
    }
    get allowInvalid() {
      return this[allowInvalid$0];
    }
    set allowInvalid(value) {
      super.allowInvalid = value;
    }
    get [_field]() {
      let t3;
      t3 = this[__CsvParser__field];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_field")) : t3;
    }
    set [_field](_field$35param) {
      this[__CsvParser__field] = _field$35param;
    }
    get [_insideString]() {
      let t3;
      t3 = this[__CsvParser__insideString];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_insideString")) : t3;
    }
    set [_insideString](_insideString$35param) {
      this[__CsvParser__insideString] = _insideString$35param;
    }
    get [_matchedChars]() {
      let t3;
      t3 = this[__CsvParser__matchedChars];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_matchedChars")) : t3;
    }
    set [_matchedChars](_matchedChars$35param) {
      this[__CsvParser__matchedChars] = _matchedChars$35param;
    }
    static _argValue(allowInvalid, userValue, defaultValue, opts) {
      let userValue2 = opts && 'userValue2' in opts ? opts.userValue2 : null;
      if (userValue != null) return userValue;
      if (userValue2 != null) return userValue2;
      if (allowInvalid == null || dart.test(allowInvalid)) return defaultValue;
      return userValue;
    }
    static ['_#new#tearOff'](opts) {
      let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : ",";
      let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : "\"";
      let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
      let eol = opts && 'eol' in opts ? opts.eol : "\r\n";
      let shouldParseNumbers = opts && 'shouldParseNumbers' in opts ? opts.shouldParseNumbers : null;
      let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
      let convertEmptyTo = opts && 'convertEmptyTo' in opts ? opts.convertEmptyTo : null;
      return new csv_parser.CsvParser.new({fieldDelimiter: fieldDelimiter, textDelimiter: textDelimiter, textEndDelimiter: textEndDelimiter, eol: eol, shouldParseNumbers: shouldParseNumbers, allowInvalid: allowInvalid, convertEmptyTo: convertEmptyTo});
    }
    [_addTextToField](c) {
      this[_field].write(c);
      this[_previousWasTextEndDelimiter] = false;
      this[_insideString] = true;
      this[_resetMatcher]();
    }
    [_parsePushbackBuffer]() {
      let backupCurrentPos = this[_currentPos];
      let backupCsvText = this[_csvText];
      let pushback = dart.nullCheck(this[_pushbackBuffer]);
      this[_csvText] = pushback;
      this[_currentPos] = 0;
      this[_pushbackBuffer] = null;
      let result = this[_parseField]();
      if (this[_currentPos] < pushback.length) {
        if (!!result.stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString)) dart.assertFailed(null, I[12], 282, 14, "result.stopReason != ParsingStopReason.EndOfString");
        this[_pushbackBuffer] = pushback[$substring](this[_currentPos]);
      }
      this[_currentPos] = backupCurrentPos;
      this[_csvText] = backupCsvText;
      return result;
    }
    [_match](c, matching) {
      let onlyTextEndDelimiterMatches = this[_insideQuotedString] && !this[_previousWasTextEndDelimiter];
      let matchTextDelimiters = !this[_insideQuotedString] && (!matching || this[_matchingTextDelimiter] > 0);
      let matchTextEndDelimiters = this[_insideQuotedString] && (!matching || this[_matchingTextEndDelimiter] > 0);
      let matchFieldDelimiters = !onlyTextEndDelimiterMatches && (!matching || this[_matchingFieldDelimiter] > 0);
      let matchEols = !onlyTextEndDelimiterMatches && (!matching || this[_matchingEol] > 0);
      let foundMatch = false;
      if (matchTextDelimiters && c === dart.nullCheck(this.textDelimiter)[$_get](this[_matchingTextDelimiter])) {
        this[_matchingTextDelimiter] = this[_matchingTextDelimiter] + 1;
        foundMatch = true;
      } else {
        this[_matchingTextDelimiter] = 0;
      }
      if (matchTextEndDelimiters && c === dart.nullCheck(this.textEndDelimiter)[$_get](this[_matchingTextEndDelimiter])) {
        this[_matchingTextEndDelimiter] = this[_matchingTextEndDelimiter] + 1;
        foundMatch = true;
      } else {
        this[_matchingTextEndDelimiter] = 0;
      }
      if (matchEols && c === dart.nullCheck(this.eol)[$_get](this[_matchingEol])) {
        this[_matchingEol] = this[_matchingEol] + 1;
        foundMatch = true;
      } else {
        this[_matchingEol] = 0;
      }
      if (matchFieldDelimiters && c === dart.nullCheck(this.fieldDelimiter)[$_get](this[_matchingFieldDelimiter])) {
        this[_matchingFieldDelimiter] = this[_matchingFieldDelimiter] + 1;
        foundMatch = true;
      } else {
        this[_matchingFieldDelimiter] = 0;
      }
      if (foundMatch) this[_matchedChars].write(c);
      return foundMatch;
    }
    [_resetMatcher]() {
      this[_matchingTextDelimiter] = 0;
      this[_matchingTextEndDelimiter] = 0;
      this[_matchingFieldDelimiter] = 0;
      this[_matchingEol] = 0;
      this[_matchedChars].clear();
    }
    [_reparseWronglyMatched]() {
      let matchedCharsText = this[_matchedChars].toString();
      let firstChar = matchedCharsText[$_get](0);
      this[_addTextToField](firstChar);
      this[_pushbackBuffer] = matchedCharsText[$substring](1);
      let result = this[_parseField]();
      return result;
    }
    [_consumeTextDelimiter]() {
      this[_resetMatcher]();
      if (!this[_insideString]) {
        this[_insideString] = true;
        this[_insideQuotedString] = true;
      }
    }
    [_consumeTextEndDelimiter]() {
      this[_resetMatcher]();
      if (this[_previousWasTextEndDelimiter]) {
        this[_addTextToField](this.textEndDelimiter);
      } else {
        this[_previousWasTextEndDelimiter] = true;
      }
    }
    [_consumeEol]() {
      this[_resetMatcher]();
      if (!(this[_insideQuotedString] === false || this[_previousWasTextEndDelimiter])) dart.assertFailed(null, I[12], 417, 12, "_insideQuotedString == false || _previousWasTextEndDelimiter");
      this[_insideString] = false;
      this[_insideQuotedString] = false;
      let quoted = this[_previousWasTextEndDelimiter];
      this[_previousWasTextEndDelimiter] = false;
      return new csv_parser.ParsingResult.new(csv_parser.ParsingStopReason.Eol, quoted);
    }
    [_consumeFieldDelimiter]() {
      this[_resetMatcher]();
      this[_insideString] = false;
      if (!(this[_insideQuotedString] === false || this[_previousWasTextEndDelimiter])) dart.assertFailed(null, I[12], 434, 12, "_insideQuotedString == false || _previousWasTextEndDelimiter");
      this[_insideQuotedString] = false;
      let quoted = this[_previousWasTextEndDelimiter];
      this[_previousWasTextEndDelimiter] = false;
      return new csv_parser.ParsingResult.new(csv_parser.ParsingStopReason.FieldDelimiter, quoted);
    }
    [_matching]() {
      return this[_matchingEol] > 0 || this[_matchingFieldDelimiter] > 0 || this[_matchingTextDelimiter] > 0 || this[_matchingTextEndDelimiter] > 0;
    }
    [_parseField]() {
      if (this[_pushbackBuffer] != null) {
        let result = this[_parsePushbackBuffer]();
        if (!result.stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString)) return result;
      }
      while (this[_currentPos] < dart.nullCheck(this[_csvText]).length) {
        let c = dart.nullCheck(this[_csvText])[$_get](this[_currentPos]);
        this[_currentPos] = this[_currentPos] + 1;
        let matching = this[_matching]();
        let foundMatch = this[_match](c, matching);
        if (matching && !foundMatch) {
          this[_currentPos] = this[_currentPos] - 1;
          let result = this[_reparseWronglyMatched]();
          if (!result.stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString)) return result;
          continue;
        }
        if (!foundMatch) {
          this[_addTextToField](c);
          continue;
        }
        let matchedTextDelimiter = this[_matchingTextDelimiter] === dart.nullCheck(this.textDelimiter).length;
        if (matchedTextDelimiter) this[_consumeTextDelimiter]();
        let matchedTextEndDelimiter = this[_matchingTextEndDelimiter] === dart.nullCheck(this.textEndDelimiter).length;
        if (matchedTextEndDelimiter) this[_consumeTextEndDelimiter]();
        let matchedEol = this[_matchingEol] === dart.nullCheck(this.eol).length;
        if (matchedEol) return this[_consumeEol]();
        let matchedFieldDelimiter = this[_matchingFieldDelimiter] === dart.nullCheck(this.fieldDelimiter).length;
        if (matchedFieldDelimiter) return this[_consumeFieldDelimiter]();
      }
      return new csv_parser.ParsingResult.new(csv_parser.ParsingStopReason.EndOfString, this[_previousWasTextEndDelimiter]);
    }
    [_addValueToRow](value, row, quoted) {
      let t3;
      if (!quoted && this.convertEmptyTo != null && value === "") {
        row[$add](dart.equals(this.convertEmptyTo, csv$.EmptyValue.NULL) ? null : this.convertEmptyTo);
      } else if (!quoted && this.shouldParseNumbers) {
        row[$add]((t3 = core.num.tryParse(value), t3 == null ? value : t3));
      } else {
        row[$add](value);
      }
    }
    verifyCurrentSettings(opts) {
      let throwError = opts && 'throwError' in opts ? opts.throwError : null;
      return csv_parser.CsvParser.verifySettings(this.fieldDelimiter, this.textDelimiter, this.textEndDelimiter, this.eol, {throwError: throwError});
    }
    static verifySettings(fieldDelimiter, textDelimiter, textEndDelimiter, eol, opts) {
      let throwError = opts && 'throwError' in opts ? opts.throwError : null;
      let errors = T.JSArrayOfArgumentError().of([]);
      if (fieldDelimiter == null) errors[$add](new csv_parser.FieldDelimiterNullError.new());
      if (textDelimiter == null) errors[$add](new csv_parser.TextDelimiterNullError.new());
      if (textEndDelimiter == null) errors[$add](new csv_parser.TextEndDelimiterNullError.new());
      if (eol == null) errors[$add](new csv_parser.EolNullError.new());
      throwError == null ? throwError = false : null;
      let argumentMap = new (T.IdentityMapOfString$StringN()).from(["fieldDelimiter", fieldDelimiter, "textDelimiter", textDelimiter, "textEndDelimiter", textEndDelimiter, "eol", eol]);
      argumentMap[$forEach](dart.fn((name, value) => {
        argumentMap[$forEach](dart.fn((name2, value2) => {
          if (name === "textDelimiter" && name2 === "textEndDelimiter" || name === "textEndDelimiter" && name2 === "textDelimiter") return;
          if (name[$compareTo](name2) >= 0) return;
          if (value == null || value2 == null) return;
          let valuesAreEqual = value == value2;
          if (valuesAreEqual || !valuesAreEqual && value[$startsWith](value2) || !valuesAreEqual && value2[$startsWith](value)) {
            errors[$add](new csv_parser.SettingsValuesEqualError.new(name, value, name2, value2));
          }
        }, T.StringAndStringNTovoid()));
      }, T.StringAndStringNTovoid()));
      if (dart.test(throwError) && errors[$isNotEmpty]) {
        if (errors[$length] === 1) dart.throw(errors[$first]);
        dart.throw(new core.ArgumentError.new(errors[$map](core.String, dart.fn(e => e[$toString](), T.ArgumentErrorToString()))[$join]("\n")));
      }
      return errors;
    }
    convertRow(E, csv, currentRow, opts) {
      let t3;
      let continueCsv = opts && 'continueCsv' in opts ? opts.continueCsv : null;
      let fieldCompleteWhenEndOfString = opts && 'fieldCompleteWhenEndOfString' in opts ? opts.fieldCompleteWhenEndOfString : null;
      continueCsv == null ? continueCsv = false : null;
      fieldCompleteWhenEndOfString == null ? fieldCompleteWhenEndOfString = true : null;
      if (!dart.test(continueCsv) || this[_csvText] == null) {
        this[_csvText] = (t3 = csv, t3 == null ? "" : t3);
        this[_currentPos] = 0;
      }
      let result = null;
      for (;;) {
        result = this[_parseField]();
        let stopReason = result.stopReason;
        if (!dart.test(fieldCompleteWhenEndOfString) && stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString)) break;
        while (dart.test(fieldCompleteWhenEndOfString) && stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString) && this[_matching]()) {
          result = this[_reparseWronglyMatched]();
          stopReason = result.stopReason;
        }
        let value = this[_field].toString();
        this[_field].clear();
        let isOptionalEolAtEnd = stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString) && !result.quoted && value[$isEmpty] && currentRow[$isEmpty];
        if (isOptionalEolAtEnd) break;
        this[_addValueToRow](value, currentRow, result.quoted);
        if (stopReason[$_equals](csv_parser.ParsingStopReason.Eol)) break;
        if (stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString)) break;
      }
      if (!this.allowInvalid && result.stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString) && dart.test(fieldCompleteWhenEndOfString) && this[_insideQuotedString] && !this[_previousWasTextEndDelimiter]) {
        dart.throw(new csv_parser.InvalidCsvException.new(this.textEndDelimiter));
      }
      return result;
    }
    convert(E, csv) {
      let rows = _interceptors.JSArray$(core.List$(E)).of([]);
      for (;;) {
        let currentRow = _interceptors.JSArray$(E).of([]);
        let result = this.convertRow(E, csv, currentRow, {continueCsv: true});
        if (currentRow[$isNotEmpty]) {
          rows[$add](currentRow);
        } else {
          if (!result.stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString)) dart.assertFailed(null, I[12], 657, 16, "result.stopReason == ParsingStopReason.EndOfString");
        }
        if (result.stopReason[$_equals](csv_parser.ParsingStopReason.EndOfString)) break;
      }
      return rows;
    }
  };
  (csv_parser.CsvParser.new = function(opts) {
    let t3, t3$;
    let fieldDelimiter = opts && 'fieldDelimiter' in opts ? opts.fieldDelimiter : ",";
    let textDelimiter = opts && 'textDelimiter' in opts ? opts.textDelimiter : "\"";
    let textEndDelimiter = opts && 'textEndDelimiter' in opts ? opts.textEndDelimiter : null;
    let eol = opts && 'eol' in opts ? opts.eol : "\r\n";
    let shouldParseNumbers = opts && 'shouldParseNumbers' in opts ? opts.shouldParseNumbers : null;
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
    let convertEmptyTo = opts && 'convertEmptyTo' in opts ? opts.convertEmptyTo : null;
    this[__CsvParser__field] = null;
    this[_csvText] = null;
    this[_pushbackBuffer] = null;
    this[__CsvParser__insideString] = null;
    this[_insideQuotedString] = false;
    this[_previousWasTextEndDelimiter] = false;
    this[__CsvParser__matchedChars] = null;
    this[convertEmptyTo$0] = convertEmptyTo;
    this[fieldDelimiter$2] = csv_parser.CsvParser._argValue(allowInvalid, fieldDelimiter, ",");
    this[textDelimiter$2] = csv_parser.CsvParser._argValue(allowInvalid, textDelimiter, "\"");
    this[textEndDelimiter$2] = csv_parser.CsvParser._argValue(allowInvalid, textEndDelimiter, "\"", {userValue2: textDelimiter});
    this[eol$2] = csv_parser.CsvParser._argValue(allowInvalid, eol, "\r\n");
    this[shouldParseNumbers$0] = (t3 = shouldParseNumbers, t3 == null ? true : t3);
    this[allowInvalid$0] = (t3$ = allowInvalid, t3$ == null ? true : t3$);
    this[_matchingFieldDelimiter] = 0;
    this[_matchingTextDelimiter] = 0;
    this[_matchingTextEndDelimiter] = 0;
    this[_matchingEol] = 0;
    this[_currentPos] = 0;
    this[_field] = new core.StringBuffer.new();
    this[_pushbackBuffer] = null;
    this[_insideString] = false;
    this[_insideQuotedString] = false;
    this[_previousWasTextEndDelimiter] = false;
    this[_matchedChars] = new core.StringBuffer.new();
    if (!this.allowInvalid) {
      csv_parser.CsvParser.verifySettings(fieldDelimiter, textDelimiter, textEndDelimiter, eol, {throwError: true});
    }
  }).prototype = csv_parser.CsvParser.prototype;
  dart.addTypeTests(csv_parser.CsvParser);
  dart.addTypeCaches(csv_parser.CsvParser);
  dart.setMethodSignature(csv_parser.CsvParser, () => ({
    __proto__: dart.getMethods(csv_parser.CsvParser.__proto__),
    [_addTextToField]: dart.fnType(dart.void, [dart.nullable(core.String)]),
    [_parsePushbackBuffer]: dart.fnType(csv_parser.ParsingResult, []),
    [_match]: dart.fnType(core.bool, [core.String, core.bool]),
    [_resetMatcher]: dart.fnType(dart.void, []),
    [_reparseWronglyMatched]: dart.fnType(csv_parser.ParsingResult, []),
    [_consumeTextDelimiter]: dart.fnType(dart.void, []),
    [_consumeTextEndDelimiter]: dart.fnType(dart.void, []),
    [_consumeEol]: dart.fnType(csv_parser.ParsingResult, []),
    [_consumeFieldDelimiter]: dart.fnType(csv_parser.ParsingResult, []),
    [_matching]: dart.fnType(core.bool, []),
    [_parseField]: dart.fnType(csv_parser.ParsingResult, []),
    [_addValueToRow]: dart.fnType(dart.void, [core.String, core.List, core.bool]),
    verifyCurrentSettings: dart.fnType(core.List$(core.ArgumentError), [], {throwError: dart.nullable(core.bool)}, {}),
    convertRow: dart.gFnType(E => [csv_parser.ParsingResult, [dart.nullable(core.String), core.List], {continueCsv: dart.nullable(core.bool), fieldCompleteWhenEndOfString: dart.nullable(core.bool)}, {}], E => [dart.nullable(core.Object)]),
    convert: dart.gFnType(E => [core.List$(core.List$(E)), [dart.nullable(core.String)]], E => [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(csv_parser.CsvParser, () => ['_argValue', 'verifySettings']);
  dart.setGetterSignature(csv_parser.CsvParser, () => ({
    __proto__: dart.getGetters(csv_parser.CsvParser.__proto__),
    [_field]: core.StringBuffer,
    [_insideString]: core.bool,
    [_matchedChars]: core.StringBuffer
  }));
  dart.setSetterSignature(csv_parser.CsvParser, () => ({
    __proto__: dart.getSetters(csv_parser.CsvParser.__proto__),
    [_field]: core.StringBuffer,
    [_insideString]: core.bool,
    [_matchedChars]: core.StringBuffer
  }));
  dart.setLibraryUri(csv_parser.CsvParser, I[13]);
  dart.setFieldSignature(csv_parser.CsvParser, () => ({
    __proto__: dart.getFields(csv_parser.CsvParser.__proto__),
    fieldDelimiter: dart.finalFieldType(dart.nullable(core.String)),
    textDelimiter: dart.finalFieldType(dart.nullable(core.String)),
    textEndDelimiter: dart.finalFieldType(dart.nullable(core.String)),
    eol: dart.finalFieldType(dart.nullable(core.String)),
    shouldParseNumbers: dart.finalFieldType(core.bool),
    convertEmptyTo: dart.finalFieldType(dart.dynamic),
    allowInvalid: dart.finalFieldType(core.bool),
    [__CsvParser__field]: dart.fieldType(dart.nullable(core.StringBuffer)),
    [_csvText]: dart.fieldType(dart.nullable(core.String)),
    [_currentPos]: dart.fieldType(core.int),
    [_pushbackBuffer]: dart.fieldType(dart.nullable(core.String)),
    [__CsvParser__insideString]: dart.fieldType(dart.nullable(core.bool)),
    [_insideQuotedString]: dart.fieldType(core.bool),
    [_previousWasTextEndDelimiter]: dart.fieldType(core.bool),
    [_matchingFieldDelimiter]: dart.fieldType(core.int),
    [_matchingTextDelimiter]: dart.fieldType(core.int),
    [_matchingTextEndDelimiter]: dart.fieldType(core.int),
    [_matchingEol]: dart.fieldType(core.int),
    [__CsvParser__matchedChars]: dart.fieldType(dart.nullable(core.StringBuffer))
  }));
  csv_parser.InvalidCsvException = class InvalidCsvException extends core.FormatException {
    static ['_#new#tearOff'](textEndDelimiter) {
      return new csv_parser.InvalidCsvException.new(textEndDelimiter);
    }
  };
  (csv_parser.InvalidCsvException.new = function(textEndDelimiter) {
    csv_parser.InvalidCsvException.__proto__.new.call(this, "The text end delimiter (" + dart.str(textEndDelimiter) + ") for the last field " + "is missing.");
    ;
  }).prototype = csv_parser.InvalidCsvException.prototype;
  dart.addTypeTests(csv_parser.InvalidCsvException);
  dart.addTypeCaches(csv_parser.InvalidCsvException);
  dart.setLibraryUri(csv_parser.InvalidCsvException, I[13]);
  var _value$ = dart.privateName(csv_parser, "ParsingStopReason._value");
  var _value = dart.privateName(csv_parser, "_value");
  csv_parser.ParsingStopReason = class ParsingStopReason extends core.Object {
    get [_value]() {
      return this[_value$];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static ['_#_#tearOff'](_value) {
      return new csv_parser.ParsingStopReason.__(_value);
    }
    toString() {
      return this[_value];
    }
  };
  (csv_parser.ParsingStopReason.__ = function(_value) {
    this[_value$] = _value;
    ;
  }).prototype = csv_parser.ParsingStopReason.prototype;
  dart.addTypeTests(csv_parser.ParsingStopReason);
  dart.addTypeCaches(csv_parser.ParsingStopReason);
  dart.setLibraryUri(csv_parser.ParsingStopReason, I[13]);
  dart.setFieldSignature(csv_parser.ParsingStopReason, () => ({
    __proto__: dart.getFields(csv_parser.ParsingStopReason.__proto__),
    [_value]: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(csv_parser.ParsingStopReason, () => ['Eol', 'FieldDelimiter', 'EndOfString']);
  dart.defineExtensionMethods(csv_parser.ParsingStopReason, ['toString']);
  dart.defineLazy(csv_parser.ParsingStopReason, {
    /*csv_parser.ParsingStopReason.Eol*/get Eol() {
      return C[28] || CT.C28;
    },
    /*csv_parser.ParsingStopReason.FieldDelimiter*/get FieldDelimiter() {
      return C[29] || CT.C29;
    },
    /*csv_parser.ParsingStopReason.EndOfString*/get EndOfString() {
      return C[30] || CT.C30;
    }
  }, false);
  var stopReason$ = dart.privateName(csv_parser, "ParsingResult.stopReason");
  var quoted$ = dart.privateName(csv_parser, "ParsingResult.quoted");
  csv_parser.ParsingResult = class ParsingResult extends core.Object {
    get stopReason() {
      return this[stopReason$];
    }
    set stopReason(value) {
      super.stopReason = value;
    }
    get quoted() {
      return this[quoted$];
    }
    set quoted(value) {
      super.quoted = value;
    }
    static ['_#new#tearOff'](stopReason, quoted) {
      return new csv_parser.ParsingResult.new(stopReason, quoted);
    }
  };
  (csv_parser.ParsingResult.new = function(stopReason, quoted) {
    this[stopReason$] = stopReason;
    this[quoted$] = quoted;
    ;
  }).prototype = csv_parser.ParsingResult.prototype;
  dart.addTypeTests(csv_parser.ParsingResult);
  dart.addTypeCaches(csv_parser.ParsingResult);
  dart.setLibraryUri(csv_parser.ParsingResult, I[13]);
  dart.setFieldSignature(csv_parser.ParsingResult, () => ({
    __proto__: dart.getFields(csv_parser.ParsingResult.__proto__),
    stopReason: dart.finalFieldType(csv_parser.ParsingStopReason),
    quoted: dart.finalFieldType(core.bool)
  }));
  csv_parser.EolNullError = class EolNullError extends core.ArgumentError {
    static ['_#new#tearOff']() {
      return new csv_parser.EolNullError.new();
    }
  };
  (csv_parser.EolNullError.new = function() {
    csv_parser.EolNullError.__proto__.new.call(this, csv_parser.EolNullError.msg);
    ;
  }).prototype = csv_parser.EolNullError.prototype;
  dart.addTypeTests(csv_parser.EolNullError);
  dart.addTypeCaches(csv_parser.EolNullError);
  dart.setLibraryUri(csv_parser.EolNullError, I[13]);
  dart.setStaticFieldSignature(csv_parser.EolNullError, () => ['msg']);
  dart.defineLazy(csv_parser.EolNullError, {
    /*csv_parser.EolNullError.msg*/get msg() {
      return "The eol character must not be null";
    }
  }, false);
  csv_parser.FieldDelimiterNullError = class FieldDelimiterNullError extends core.ArgumentError {
    static ['_#new#tearOff']() {
      return new csv_parser.FieldDelimiterNullError.new();
    }
  };
  (csv_parser.FieldDelimiterNullError.new = function() {
    csv_parser.FieldDelimiterNullError.__proto__.new.call(this, csv_parser.FieldDelimiterNullError.msg);
    ;
  }).prototype = csv_parser.FieldDelimiterNullError.prototype;
  dart.addTypeTests(csv_parser.FieldDelimiterNullError);
  dart.addTypeCaches(csv_parser.FieldDelimiterNullError);
  dart.setLibraryUri(csv_parser.FieldDelimiterNullError, I[13]);
  dart.setStaticFieldSignature(csv_parser.FieldDelimiterNullError, () => ['msg']);
  dart.defineLazy(csv_parser.FieldDelimiterNullError, {
    /*csv_parser.FieldDelimiterNullError.msg*/get msg() {
      return "The field delimiter character must not be null";
    }
  }, false);
  csv_parser.TextDelimiterNullError = class TextDelimiterNullError extends core.ArgumentError {
    static ['_#new#tearOff']() {
      return new csv_parser.TextDelimiterNullError.new();
    }
  };
  (csv_parser.TextDelimiterNullError.new = function() {
    csv_parser.TextDelimiterNullError.__proto__.new.call(this, csv_parser.TextDelimiterNullError.msg);
    ;
  }).prototype = csv_parser.TextDelimiterNullError.prototype;
  dart.addTypeTests(csv_parser.TextDelimiterNullError);
  dart.addTypeCaches(csv_parser.TextDelimiterNullError);
  dart.setLibraryUri(csv_parser.TextDelimiterNullError, I[13]);
  dart.setStaticFieldSignature(csv_parser.TextDelimiterNullError, () => ['msg']);
  dart.defineLazy(csv_parser.TextDelimiterNullError, {
    /*csv_parser.TextDelimiterNullError.msg*/get msg() {
      return "The text delimiter character must not be null";
    }
  }, false);
  csv_parser.TextEndDelimiterNullError = class TextEndDelimiterNullError extends core.ArgumentError {
    static ['_#new#tearOff']() {
      return new csv_parser.TextEndDelimiterNullError.new();
    }
  };
  (csv_parser.TextEndDelimiterNullError.new = function() {
    csv_parser.TextEndDelimiterNullError.__proto__.new.call(this, csv_parser.TextEndDelimiterNullError.msg);
    ;
  }).prototype = csv_parser.TextEndDelimiterNullError.prototype;
  dart.addTypeTests(csv_parser.TextEndDelimiterNullError);
  dart.addTypeCaches(csv_parser.TextEndDelimiterNullError);
  dart.setLibraryUri(csv_parser.TextEndDelimiterNullError, I[13]);
  dart.setStaticFieldSignature(csv_parser.TextEndDelimiterNullError, () => ['msg']);
  dart.defineLazy(csv_parser.TextEndDelimiterNullError, {
    /*csv_parser.TextEndDelimiterNullError.msg*/get msg() {
      return "The text end delimiter character must not be null.";
    }
  }, false);
  var argument1$ = dart.privateName(csv_parser, "SettingsValuesEqualError.argument1");
  var argument2$ = dart.privateName(csv_parser, "SettingsValuesEqualError.argument2");
  var value1 = dart.privateName(csv_parser, "SettingsValuesEqualError.value1");
  var value2 = dart.privateName(csv_parser, "SettingsValuesEqualError.value2");
  csv_parser.SettingsValuesEqualError = class SettingsValuesEqualError extends core.ArgumentError {
    get argument1() {
      return this[argument1$];
    }
    set argument1(value) {
      super.argument1 = value;
    }
    get argument2() {
      return this[argument2$];
    }
    set argument2(value) {
      super.argument2 = value;
    }
    get value1() {
      return this[value1];
    }
    set value1(value) {
      super.value1 = value;
    }
    get value2() {
      return this[value2];
    }
    set value2(value) {
      super.value2 = value;
    }
    static ['_#new#tearOff'](argument1, val1, argument2, val2) {
      return new csv_parser.SettingsValuesEqualError.new(argument1, val1, argument2, val2);
    }
  };
  (csv_parser.SettingsValuesEqualError.new = function(argument1, val1, argument2, val2) {
    this[argument1$] = argument1;
    this[argument2$] = argument2;
    this[value1] = val1;
    this[value2] = val2;
    csv_parser.SettingsValuesEqualError.__proto__.new.call(this, argument1 + " (" + val1 + ") and " + argument2 + " (" + val2 + ") must be different " + "(and one must not be the start of the other)");
    ;
  }).prototype = csv_parser.SettingsValuesEqualError.prototype;
  dart.addTypeTests(csv_parser.SettingsValuesEqualError);
  dart.addTypeCaches(csv_parser.SettingsValuesEqualError);
  dart.setLibraryUri(csv_parser.SettingsValuesEqualError, I[13]);
  dart.setFieldSignature(csv_parser.SettingsValuesEqualError, () => ({
    __proto__: dart.getFields(csv_parser.SettingsValuesEqualError.__proto__),
    argument1: dart.finalFieldType(core.String),
    argument2: dart.finalFieldType(core.String),
    value1: dart.finalFieldType(core.String),
    value2: dart.finalFieldType(core.String)
  }));
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[14], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[31] || CT.C31)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[15]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  path_provider_platform_interface.PathProviderPlatform = class PathProviderPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return path_provider_platform_interface.PathProviderPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verify(instance, path_provider_platform_interface.PathProviderPlatform._token);
      path_provider_platform_interface.PathProviderPlatform._instance = instance;
    }
    getTemporaryPath() {
      dart.throw(new core.UnimplementedError.new("getTemporaryPath() has not been implemented."));
    }
    getApplicationSupportPath() {
      dart.throw(new core.UnimplementedError.new("getApplicationSupportPath() has not been implemented."));
    }
    getLibraryPath() {
      dart.throw(new core.UnimplementedError.new("getLibraryPath() has not been implemented."));
    }
    getApplicationDocumentsPath() {
      dart.throw(new core.UnimplementedError.new("getApplicationDocumentsPath() has not been implemented."));
    }
    getApplicationCachePath() {
      dart.throw(new core.UnimplementedError.new("getApplicationCachePath() has not been implemented."));
    }
    getExternalStoragePath() {
      dart.throw(new core.UnimplementedError.new("getExternalStoragePath() has not been implemented."));
    }
    getExternalCachePaths() {
      dart.throw(new core.UnimplementedError.new("getExternalCachePaths() has not been implemented."));
    }
    getExternalStoragePaths(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      dart.throw(new core.UnimplementedError.new("getExternalStoragePaths() has not been implemented."));
    }
    getDownloadsPath() {
      dart.throw(new core.UnimplementedError.new("getDownloadsPath() has not been implemented."));
    }
  };
  (path_provider_platform_interface.PathProviderPlatform.new = function() {
    path_provider_platform_interface.PathProviderPlatform.__proto__.new.call(this, {token: path_provider_platform_interface.PathProviderPlatform._token});
    ;
  }).prototype = path_provider_platform_interface.PathProviderPlatform.prototype;
  dart.addTypeTests(path_provider_platform_interface.PathProviderPlatform);
  dart.addTypeCaches(path_provider_platform_interface.PathProviderPlatform);
  dart.setMethodSignature(path_provider_platform_interface.PathProviderPlatform, () => ({
    __proto__: dart.getMethods(path_provider_platform_interface.PathProviderPlatform.__proto__),
    getTemporaryPath: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getApplicationSupportPath: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getLibraryPath: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getApplicationDocumentsPath: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getApplicationCachePath: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getExternalStoragePath: dart.fnType(async.Future$(dart.nullable(core.String)), []),
    getExternalCachePaths: dart.fnType(async.Future$(dart.nullable(core.List$(core.String))), []),
    getExternalStoragePaths: dart.fnType(async.Future$(dart.nullable(core.List$(core.String))), [], {type: dart.nullable(enums.StorageDirectory)}, {}),
    getDownloadsPath: dart.fnType(async.Future$(dart.nullable(core.String)), [])
  }));
  dart.setStaticGetterSignature(path_provider_platform_interface.PathProviderPlatform, () => ['instance']);
  dart.setStaticSetterSignature(path_provider_platform_interface.PathProviderPlatform, () => ['instance']);
  dart.setLibraryUri(path_provider_platform_interface.PathProviderPlatform, I[16]);
  dart.setStaticFieldSignature(path_provider_platform_interface.PathProviderPlatform, () => ['_token', '_instance']);
  dart.defineLazy(path_provider_platform_interface.PathProviderPlatform, {
    /*path_provider_platform_interface.PathProviderPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*path_provider_platform_interface.PathProviderPlatform._instance*/get _instance() {
      return new method_channel_path_provider.MethodChannelPathProvider.new();
    },
    set _instance(value) {}
  }, false);
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[15]);
  enums.StorageDirectory = class StorageDirectory extends core._Enum {
    [_enumToString]() {
      return "StorageDirectory." + this[_name];
    }
  };
  (enums.StorageDirectory.new = function(index, name) {
    enums.StorageDirectory.__proto__.new.call(this, index, name);
    ;
  }).prototype = enums.StorageDirectory.prototype;
  dart.addTypeTests(enums.StorageDirectory);
  dart.addTypeCaches(enums.StorageDirectory);
  dart.setMethodSignature(enums.StorageDirectory, () => ({
    __proto__: dart.getMethods(enums.StorageDirectory.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(enums.StorageDirectory, I[17]);
  dart.setStaticFieldSignature(enums.StorageDirectory, () => ['values', 'music', 'podcasts', 'ringtones', 'alarms', 'notifications', 'pictures', 'movies', 'downloads', 'dcim', 'documents']);
  dart.defineLazy(enums.StorageDirectory, {
    /*enums.StorageDirectory.values*/get values() {
      return C[32] || CT.C32;
    },
    /*enums.StorageDirectory.music*/get music() {
      return C[33] || CT.C33;
    },
    /*enums.StorageDirectory.podcasts*/get podcasts() {
      return C[34] || CT.C34;
    },
    /*enums.StorageDirectory.ringtones*/get ringtones() {
      return C[35] || CT.C35;
    },
    /*enums.StorageDirectory.alarms*/get alarms() {
      return C[36] || CT.C36;
    },
    /*enums.StorageDirectory.notifications*/get notifications() {
      return C[37] || CT.C37;
    },
    /*enums.StorageDirectory.pictures*/get pictures() {
      return C[38] || CT.C38;
    },
    /*enums.StorageDirectory.movies*/get movies() {
      return C[39] || CT.C39;
    },
    /*enums.StorageDirectory.downloads*/get downloads() {
      return C[40] || CT.C40;
    },
    /*enums.StorageDirectory.dcim*/get dcim() {
      return C[41] || CT.C41;
    },
    /*enums.StorageDirectory.documents*/get documents() {
      return C[42] || CT.C42;
    }
  }, false);
  var methodChannel = dart.privateName(method_channel_path_provider, "MethodChannelPathProvider.methodChannel");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var _platform = dart.privateName(method_channel_path_provider, "_platform");
  method_channel_path_provider.MethodChannelPathProvider = class MethodChannelPathProvider extends path_provider_platform_interface.PathProviderPlatform {
    get methodChannel() {
      return this[methodChannel];
    }
    set methodChannel(value) {
      this[methodChannel] = value;
    }
    setMockPathProviderPlatform(platform) {
      this[_platform] = platform;
    }
    getTemporaryPath() {
      return this.methodChannel.invokeMethod(core.String, "getTemporaryDirectory");
    }
    getApplicationSupportPath() {
      return this.methodChannel.invokeMethod(core.String, "getApplicationSupportDirectory");
    }
    getLibraryPath() {
      if (!this[_platform].isIOS && !this[_platform].isMacOS) {
        dart.throw(new core.UnsupportedError.new("Functionality only available on iOS/macOS"));
      }
      return this.methodChannel.invokeMethod(core.String, "getLibraryDirectory");
    }
    getApplicationDocumentsPath() {
      return this.methodChannel.invokeMethod(core.String, "getApplicationDocumentsDirectory");
    }
    getApplicationCachePath() {
      return this.methodChannel.invokeMethod(core.String, "getApplicationCacheDirectory");
    }
    getExternalStoragePath() {
      if (!this[_platform].isAndroid) {
        dart.throw(new core.UnsupportedError.new("Functionality only available on Android"));
      }
      return this.methodChannel.invokeMethod(core.String, "getStorageDirectory");
    }
    getExternalCachePaths() {
      if (!this[_platform].isAndroid) {
        dart.throw(new core.UnsupportedError.new("Functionality only available on Android"));
      }
      return this.methodChannel.invokeListMethod(core.String, "getExternalCacheDirectories");
    }
    getExternalStoragePaths(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      return async.async(T.ListNOfString(), (function* getExternalStoragePaths() {
        let t5;
        if (!this[_platform].isAndroid) {
          dart.throw(new core.UnsupportedError.new("Functionality only available on Android"));
        }
        return this.methodChannel.invokeListMethod(core.String, "getExternalStorageDirectories", new (T.IdentityMapOfString$dynamic()).from(["type", (t5 = type, t5 == null ? null : t5.index)]));
      }).bind(this));
    }
    getDownloadsPath() {
      if (!this[_platform].isMacOS) {
        dart.throw(new core.UnsupportedError.new("Functionality only available on macOS"));
      }
      return this.methodChannel.invokeMethod(core.String, "getDownloadsDirectory");
    }
    static ['_#new#tearOff']() {
      return new method_channel_path_provider.MethodChannelPathProvider.new();
    }
  };
  (method_channel_path_provider.MethodChannelPathProvider.new = function() {
    this[methodChannel] = C[43] || CT.C43;
    this[_platform] = C[46] || CT.C46;
    method_channel_path_provider.MethodChannelPathProvider.__proto__.new.call(this);
    ;
  }).prototype = method_channel_path_provider.MethodChannelPathProvider.prototype;
  dart.addTypeTests(method_channel_path_provider.MethodChannelPathProvider);
  dart.addTypeCaches(method_channel_path_provider.MethodChannelPathProvider);
  dart.setMethodSignature(method_channel_path_provider.MethodChannelPathProvider, () => ({
    __proto__: dart.getMethods(method_channel_path_provider.MethodChannelPathProvider.__proto__),
    setMockPathProviderPlatform: dart.fnType(dart.void, [platform$.Platform])
  }));
  dart.setLibraryUri(method_channel_path_provider.MethodChannelPathProvider, I[18]);
  dart.setFieldSignature(method_channel_path_provider.MethodChannelPathProvider, () => ({
    __proto__: dart.getFields(method_channel_path_provider.MethodChannelPathProvider.__proto__),
    methodChannel: dart.fieldType(platform_channel.MethodChannel),
    [_platform]: dart.fieldType(platform$.Platform)
  }));
  var JsonEncoder__toEncodable = dart.privateName(convert, "JsonEncoder._toEncodable");
  var JsonEncoder_indent = dart.privateName(convert, "JsonEncoder.indent");
  platform$.Platform = class Platform extends core.Object {
    get isLinux() {
      return this.operatingSystem === "linux";
    }
    get isMacOS() {
      return this.operatingSystem === "macos";
    }
    get isWindows() {
      return this.operatingSystem === "windows";
    }
    get isAndroid() {
      return this.operatingSystem === "android";
    }
    get isIOS() {
      return this.operatingSystem === "ios";
    }
    get isFuchsia() {
      return this.operatingSystem === "fuchsia";
    }
    toJson() {
      return (C[47] || CT.C47).convert(new (T.IdentityMapOfString$dynamic()).from(["numberOfProcessors", this.numberOfProcessors, "pathSeparator", this.pathSeparator, "operatingSystem", this.operatingSystem, "operatingSystemVersion", this.operatingSystemVersion, "localHostname", this.localHostname, "environment", this.environment, "executable", this.executable, "resolvedExecutable", this.resolvedExecutable, "script", this.script.toString(), "executableArguments", this.executableArguments, "packageConfig", this.packageConfig, "version", this.version, "stdinSupportsAnsi", this.stdinSupportsAnsi, "stdoutSupportsAnsi", this.stdoutSupportsAnsi, "localeName", this.localeName]));
    }
  };
  (platform$.Platform.new = function() {
    ;
  }).prototype = platform$.Platform.prototype;
  dart.addTypeTests(platform$.Platform);
  dart.addTypeCaches(platform$.Platform);
  dart.setMethodSignature(platform$.Platform, () => ({
    __proto__: dart.getMethods(platform$.Platform.__proto__),
    toJson: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(platform$.Platform, () => ({
    __proto__: dart.getGetters(platform$.Platform.__proto__),
    isLinux: core.bool,
    isMacOS: core.bool,
    isWindows: core.bool,
    isAndroid: core.bool,
    isIOS: core.bool,
    isFuchsia: core.bool
  }));
  dart.setLibraryUri(platform$.Platform, I[19]);
  dart.setStaticFieldSignature(platform$.Platform, () => ['linux', 'windows', 'macOS', 'android', 'iOS', 'fuchsia', 'operatingSystemValues']);
  dart.defineLazy(platform$.Platform, {
    /*platform$.Platform.linux*/get linux() {
      return "linux";
    },
    /*platform$.Platform.windows*/get windows() {
      return "windows";
    },
    /*platform$.Platform.macOS*/get macOS() {
      return "macos";
    },
    /*platform$.Platform.android*/get android() {
      return "android";
    },
    /*platform$.Platform.iOS*/get iOS() {
      return "ios";
    },
    /*platform$.Platform.fuchsia*/get fuchsia() {
      return "fuchsia";
    },
    /*platform$.Platform.operatingSystemValues*/get operatingSystemValues() {
      return C[48] || CT.C48;
    }
  }, false);
  local_platform.LocalPlatform = class LocalPlatform extends platform$.Platform {
    static ['_#new#tearOff']() {
      return new local_platform.LocalPlatform.new();
    }
    get numberOfProcessors() {
      return io.Platform.numberOfProcessors;
    }
    get pathSeparator() {
      return io.Platform.pathSeparator;
    }
    get operatingSystem() {
      return io.Platform.operatingSystem;
    }
    get operatingSystemVersion() {
      return io.Platform.operatingSystemVersion;
    }
    get localHostname() {
      return io.Platform.localHostname;
    }
    get environment() {
      return io.Platform.environment;
    }
    get executable() {
      return io.Platform.executable;
    }
    get resolvedExecutable() {
      return io.Platform.resolvedExecutable;
    }
    get script() {
      return io.Platform.script;
    }
    get executableArguments() {
      return io.Platform.executableArguments;
    }
    get packageConfig() {
      return io.Platform.packageConfig;
    }
    get version() {
      return io.Platform.version;
    }
    get stdinSupportsAnsi() {
      return io.stdin.supportsAnsiEscapes;
    }
    get stdoutSupportsAnsi() {
      return io.stdout.supportsAnsiEscapes;
    }
    get localeName() {
      return io.Platform.localeName;
    }
  };
  (local_platform.LocalPlatform.new = function() {
    local_platform.LocalPlatform.__proto__.new.call(this);
    ;
  }).prototype = local_platform.LocalPlatform.prototype;
  dart.addTypeTests(local_platform.LocalPlatform);
  dart.addTypeCaches(local_platform.LocalPlatform);
  dart.setGetterSignature(local_platform.LocalPlatform, () => ({
    __proto__: dart.getGetters(local_platform.LocalPlatform.__proto__),
    numberOfProcessors: core.int,
    pathSeparator: core.String,
    operatingSystem: core.String,
    operatingSystemVersion: core.String,
    localHostname: core.String,
    environment: core.Map$(core.String, core.String),
    executable: core.String,
    resolvedExecutable: core.String,
    script: core.Uri,
    executableArguments: core.List$(core.String),
    packageConfig: dart.nullable(core.String),
    version: core.String,
    stdinSupportsAnsi: core.bool,
    stdoutSupportsAnsi: core.bool,
    localeName: core.String
  }));
  dart.setLibraryUri(local_platform.LocalPlatform, I[20]);
  var packageConfig$ = dart.privateName(fake_platform, "FakePlatform.packageConfig");
  var _numberOfProcessors = dart.privateName(fake_platform, "_numberOfProcessors");
  var _pathSeparator = dart.privateName(fake_platform, "_pathSeparator");
  var _operatingSystem = dart.privateName(fake_platform, "_operatingSystem");
  var _operatingSystemVersion = dart.privateName(fake_platform, "_operatingSystemVersion");
  var _localHostname = dart.privateName(fake_platform, "_localHostname");
  var _environment = dart.privateName(fake_platform, "_environment");
  var _executable = dart.privateName(fake_platform, "_executable");
  var _resolvedExecutable = dart.privateName(fake_platform, "_resolvedExecutable");
  var _script = dart.privateName(fake_platform, "_script");
  var _executableArguments = dart.privateName(fake_platform, "_executableArguments");
  var _version = dart.privateName(fake_platform, "_version");
  var _stdinSupportsAnsi = dart.privateName(fake_platform, "_stdinSupportsAnsi");
  var _stdoutSupportsAnsi = dart.privateName(fake_platform, "_stdoutSupportsAnsi");
  var _localeName = dart.privateName(fake_platform, "_localeName");
  var JsonDecoder__reviver = dart.privateName(convert, "JsonDecoder._reviver");
  var _throwIfNull = dart.privateName(fake_platform, "_throwIfNull");
  fake_platform.FakePlatform = class FakePlatform extends platform$.Platform {
    get packageConfig() {
      return this[packageConfig$];
    }
    set packageConfig(value) {
      this[packageConfig$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let numberOfProcessors = opts && 'numberOfProcessors' in opts ? opts.numberOfProcessors : null;
      let pathSeparator = opts && 'pathSeparator' in opts ? opts.pathSeparator : null;
      let operatingSystem = opts && 'operatingSystem' in opts ? opts.operatingSystem : null;
      let operatingSystemVersion = opts && 'operatingSystemVersion' in opts ? opts.operatingSystemVersion : null;
      let localHostname = opts && 'localHostname' in opts ? opts.localHostname : null;
      let environment = opts && 'environment' in opts ? opts.environment : null;
      let executable = opts && 'executable' in opts ? opts.executable : null;
      let resolvedExecutable = opts && 'resolvedExecutable' in opts ? opts.resolvedExecutable : null;
      let script = opts && 'script' in opts ? opts.script : null;
      let executableArguments = opts && 'executableArguments' in opts ? opts.executableArguments : null;
      let packageConfig = opts && 'packageConfig' in opts ? opts.packageConfig : null;
      let version = opts && 'version' in opts ? opts.version : null;
      let stdinSupportsAnsi = opts && 'stdinSupportsAnsi' in opts ? opts.stdinSupportsAnsi : null;
      let stdoutSupportsAnsi = opts && 'stdoutSupportsAnsi' in opts ? opts.stdoutSupportsAnsi : null;
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      return new fake_platform.FakePlatform.new({numberOfProcessors: numberOfProcessors, pathSeparator: pathSeparator, operatingSystem: operatingSystem, operatingSystemVersion: operatingSystemVersion, localHostname: localHostname, environment: environment, executable: executable, resolvedExecutable: resolvedExecutable, script: script, executableArguments: executableArguments, packageConfig: packageConfig, version: version, stdinSupportsAnsi: stdinSupportsAnsi, stdoutSupportsAnsi: stdoutSupportsAnsi, localeName: localeName});
    }
    static ['_#fromPlatform#tearOff'](platform) {
      return new fake_platform.FakePlatform.fromPlatform(platform);
    }
    static fromJson(json) {
      let map = T.MapOfString$dynamic().as((C[49] || CT.C49).convert(json));
      return new fake_platform.FakePlatform.new({numberOfProcessors: T.intN().as(map[$_get]("numberOfProcessors")), pathSeparator: T.StringN().as(map[$_get]("pathSeparator")), operatingSystem: T.StringN().as(map[$_get]("operatingSystem")), operatingSystemVersion: T.StringN().as(map[$_get]("operatingSystemVersion")), localHostname: T.StringN().as(map[$_get]("localHostname")), environment: T.MapOfObjectN$ObjectN().as(map[$_get]("environment"))[$cast](core.String, core.String), executable: T.StringN().as(map[$_get]("executable")), resolvedExecutable: T.StringN().as(map[$_get]("resolvedExecutable")), script: core.Uri.parse(core.String.as(map[$_get]("script"))), executableArguments: T.ListOfObjectN().as(map[$_get]("executableArguments"))[$cast](core.String), packageConfig: T.StringN().as(map[$_get]("packageConfig")), version: T.StringN().as(map[$_get]("version")), stdinSupportsAnsi: T.boolN().as(map[$_get]("stdinSupportsAnsi")), stdoutSupportsAnsi: T.boolN().as(map[$_get]("stdoutSupportsAnsi")), localeName: T.StringN().as(map[$_get]("localeName"))});
    }
    static ['_#fromJson#tearOff'](json) {
      return fake_platform.FakePlatform.fromJson(json);
    }
    copyWith(opts) {
      let t5, t5$, t5$0, t5$1, t5$2, t5$3, t5$4, t5$5, t5$6, t5$7, t5$8, t5$9, t5$10, t5$11, t5$12;
      let numberOfProcessors = opts && 'numberOfProcessors' in opts ? opts.numberOfProcessors : null;
      let pathSeparator = opts && 'pathSeparator' in opts ? opts.pathSeparator : null;
      let operatingSystem = opts && 'operatingSystem' in opts ? opts.operatingSystem : null;
      let operatingSystemVersion = opts && 'operatingSystemVersion' in opts ? opts.operatingSystemVersion : null;
      let localHostname = opts && 'localHostname' in opts ? opts.localHostname : null;
      let environment = opts && 'environment' in opts ? opts.environment : null;
      let executable = opts && 'executable' in opts ? opts.executable : null;
      let resolvedExecutable = opts && 'resolvedExecutable' in opts ? opts.resolvedExecutable : null;
      let script = opts && 'script' in opts ? opts.script : null;
      let executableArguments = opts && 'executableArguments' in opts ? opts.executableArguments : null;
      let packageConfig = opts && 'packageConfig' in opts ? opts.packageConfig : null;
      let version = opts && 'version' in opts ? opts.version : null;
      let stdinSupportsAnsi = opts && 'stdinSupportsAnsi' in opts ? opts.stdinSupportsAnsi : null;
      let stdoutSupportsAnsi = opts && 'stdoutSupportsAnsi' in opts ? opts.stdoutSupportsAnsi : null;
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      return new fake_platform.FakePlatform.new({numberOfProcessors: (t5 = numberOfProcessors, t5 == null ? this.numberOfProcessors : t5), pathSeparator: (t5$ = pathSeparator, t5$ == null ? this.pathSeparator : t5$), operatingSystem: (t5$0 = operatingSystem, t5$0 == null ? this.operatingSystem : t5$0), operatingSystemVersion: (t5$1 = operatingSystemVersion, t5$1 == null ? this.operatingSystemVersion : t5$1), localHostname: (t5$2 = localHostname, t5$2 == null ? this.localHostname : t5$2), environment: (t5$3 = environment, t5$3 == null ? this.environment : t5$3), executable: (t5$4 = executable, t5$4 == null ? this.executable : t5$4), resolvedExecutable: (t5$5 = resolvedExecutable, t5$5 == null ? this.resolvedExecutable : t5$5), script: (t5$6 = script, t5$6 == null ? this.script : t5$6), executableArguments: (t5$7 = executableArguments, t5$7 == null ? this.executableArguments : t5$7), packageConfig: (t5$8 = packageConfig, t5$8 == null ? this.packageConfig : t5$8), version: (t5$9 = version, t5$9 == null ? this.version : t5$9), stdinSupportsAnsi: (t5$10 = stdinSupportsAnsi, t5$10 == null ? this.stdinSupportsAnsi : t5$10), stdoutSupportsAnsi: (t5$11 = stdoutSupportsAnsi, t5$11 == null ? this.stdoutSupportsAnsi : t5$11), localeName: (t5$12 = localeName, t5$12 == null ? this.localeName : t5$12)});
    }
    get numberOfProcessors() {
      return this[_throwIfNull](core.int, this[_numberOfProcessors]);
    }
    get pathSeparator() {
      return this[_throwIfNull](core.String, this[_pathSeparator]);
    }
    get operatingSystem() {
      return this[_throwIfNull](core.String, this[_operatingSystem]);
    }
    get operatingSystemVersion() {
      return this[_throwIfNull](core.String, this[_operatingSystemVersion]);
    }
    get localHostname() {
      return this[_throwIfNull](core.String, this[_localHostname]);
    }
    get environment() {
      return this[_throwIfNull](T.MapOfString$String(), this[_environment]);
    }
    get executable() {
      return this[_throwIfNull](core.String, this[_executable]);
    }
    get resolvedExecutable() {
      return this[_throwIfNull](core.String, this[_resolvedExecutable]);
    }
    get script() {
      return this[_throwIfNull](core.Uri, this[_script]);
    }
    get executableArguments() {
      return this[_throwIfNull](T.ListOfString(), this[_executableArguments]);
    }
    get version() {
      return this[_throwIfNull](core.String, this[_version]);
    }
    get stdinSupportsAnsi() {
      return this[_throwIfNull](core.bool, this[_stdinSupportsAnsi]);
    }
    get stdoutSupportsAnsi() {
      return this[_throwIfNull](core.bool, this[_stdoutSupportsAnsi]);
    }
    get localeName() {
      return this[_throwIfNull](core.String, this[_localeName]);
    }
    [_throwIfNull](T, value) {
      if (value == null) {
        dart.throw(new core.StateError.new("Tried to read property of FakePlatform but it was unset."));
      }
      return value;
    }
  };
  (fake_platform.FakePlatform.new = function(opts) {
    let numberOfProcessors = opts && 'numberOfProcessors' in opts ? opts.numberOfProcessors : null;
    let pathSeparator = opts && 'pathSeparator' in opts ? opts.pathSeparator : null;
    let operatingSystem = opts && 'operatingSystem' in opts ? opts.operatingSystem : null;
    let operatingSystemVersion = opts && 'operatingSystemVersion' in opts ? opts.operatingSystemVersion : null;
    let localHostname = opts && 'localHostname' in opts ? opts.localHostname : null;
    let environment = opts && 'environment' in opts ? opts.environment : null;
    let executable = opts && 'executable' in opts ? opts.executable : null;
    let resolvedExecutable = opts && 'resolvedExecutable' in opts ? opts.resolvedExecutable : null;
    let script = opts && 'script' in opts ? opts.script : null;
    let executableArguments = opts && 'executableArguments' in opts ? opts.executableArguments : null;
    let packageConfig = opts && 'packageConfig' in opts ? opts.packageConfig : null;
    let version = opts && 'version' in opts ? opts.version : null;
    let stdinSupportsAnsi = opts && 'stdinSupportsAnsi' in opts ? opts.stdinSupportsAnsi : null;
    let stdoutSupportsAnsi = opts && 'stdoutSupportsAnsi' in opts ? opts.stdoutSupportsAnsi : null;
    let localeName = opts && 'localeName' in opts ? opts.localeName : null;
    this[packageConfig$] = packageConfig;
    this[_numberOfProcessors] = numberOfProcessors;
    this[_pathSeparator] = pathSeparator;
    this[_operatingSystem] = operatingSystem;
    this[_operatingSystemVersion] = operatingSystemVersion;
    this[_localHostname] = localHostname;
    this[_environment] = environment;
    this[_executable] = executable;
    this[_resolvedExecutable] = resolvedExecutable;
    this[_script] = script;
    this[_executableArguments] = executableArguments;
    this[_version] = version;
    this[_stdinSupportsAnsi] = stdinSupportsAnsi;
    this[_stdoutSupportsAnsi] = stdoutSupportsAnsi;
    this[_localeName] = localeName;
    fake_platform.FakePlatform.__proto__.new.call(this);
    ;
  }).prototype = fake_platform.FakePlatform.prototype;
  (fake_platform.FakePlatform.fromPlatform = function(platform) {
    this[_numberOfProcessors] = platform.numberOfProcessors;
    this[_pathSeparator] = platform.pathSeparator;
    this[_operatingSystem] = platform.operatingSystem;
    this[_operatingSystemVersion] = platform.operatingSystemVersion;
    this[_localHostname] = platform.localHostname;
    this[_environment] = T.LinkedHashMapOfString$String().from(platform.environment);
    this[_executable] = platform.executable;
    this[_resolvedExecutable] = platform.resolvedExecutable;
    this[_script] = platform.script;
    this[_executableArguments] = T.ListOfString().from(platform.executableArguments);
    this[packageConfig$] = platform.packageConfig;
    this[_version] = platform.version;
    this[_stdinSupportsAnsi] = platform.stdinSupportsAnsi;
    this[_stdoutSupportsAnsi] = platform.stdoutSupportsAnsi;
    this[_localeName] = platform.localeName;
    fake_platform.FakePlatform.__proto__.new.call(this);
    ;
  }).prototype = fake_platform.FakePlatform.prototype;
  dart.addTypeTests(fake_platform.FakePlatform);
  dart.addTypeCaches(fake_platform.FakePlatform);
  dart.setMethodSignature(fake_platform.FakePlatform, () => ({
    __proto__: dart.getMethods(fake_platform.FakePlatform.__proto__),
    copyWith: dart.fnType(fake_platform.FakePlatform, [], {environment: dart.nullable(core.Map$(core.String, core.String)), executable: dart.nullable(core.String), executableArguments: dart.nullable(core.List$(core.String)), localHostname: dart.nullable(core.String), localeName: dart.nullable(core.String), numberOfProcessors: dart.nullable(core.int), operatingSystem: dart.nullable(core.String), operatingSystemVersion: dart.nullable(core.String), packageConfig: dart.nullable(core.String), pathSeparator: dart.nullable(core.String), resolvedExecutable: dart.nullable(core.String), script: dart.nullable(core.Uri), stdinSupportsAnsi: dart.nullable(core.bool), stdoutSupportsAnsi: dart.nullable(core.bool), version: dart.nullable(core.String)}, {}),
    [_throwIfNull]: dart.gFnType(T => [T, [dart.nullable(T)]], T => [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(fake_platform.FakePlatform, () => ['fromJson']);
  dart.setGetterSignature(fake_platform.FakePlatform, () => ({
    __proto__: dart.getGetters(fake_platform.FakePlatform.__proto__),
    numberOfProcessors: core.int,
    pathSeparator: core.String,
    operatingSystem: core.String,
    operatingSystemVersion: core.String,
    localHostname: core.String,
    environment: core.Map$(core.String, core.String),
    executable: core.String,
    resolvedExecutable: core.String,
    script: core.Uri,
    executableArguments: core.List$(core.String),
    version: core.String,
    stdinSupportsAnsi: core.bool,
    stdoutSupportsAnsi: core.bool,
    localeName: core.String
  }));
  dart.setLibraryUri(fake_platform.FakePlatform, I[21]);
  dart.setFieldSignature(fake_platform.FakePlatform, () => ({
    __proto__: dart.getFields(fake_platform.FakePlatform.__proto__),
    [_numberOfProcessors]: dart.fieldType(dart.nullable(core.int)),
    [_pathSeparator]: dart.fieldType(dart.nullable(core.String)),
    [_operatingSystem]: dart.fieldType(dart.nullable(core.String)),
    [_operatingSystemVersion]: dart.fieldType(dart.nullable(core.String)),
    [_localHostname]: dart.fieldType(dart.nullable(core.String)),
    [_environment]: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    [_executable]: dart.fieldType(dart.nullable(core.String)),
    [_resolvedExecutable]: dart.fieldType(dart.nullable(core.String)),
    [_script]: dart.fieldType(dart.nullable(core.Uri)),
    [_executableArguments]: dart.fieldType(dart.nullable(core.List$(core.String))),
    packageConfig: dart.fieldType(dart.nullable(core.String)),
    [_version]: dart.fieldType(dart.nullable(core.String)),
    [_stdinSupportsAnsi]: dart.fieldType(dart.nullable(core.bool)),
    [_stdoutSupportsAnsi]: dart.fieldType(dart.nullable(core.bool)),
    [_localeName]: dart.fieldType(dart.nullable(core.String))
  }));
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/screens/splash_screen.dart": splash_screen,
    "file:///zapp/project/lib/screens/main_screen.dart": main_screen,
    "file:///zapp/project/lib/screens/game_page.dart": game_page,
    "file:///zapp/project/lib/screens/options_screen.dart": options_screen,
    "file:///zapp/project/lib/screens/high_scores.dart": high_scores,
    "file:///zapp/project/lib/screens/single_player_game.dart": single_player_game,
    "package:csv/csv.dart": csv$,
    "package:path_provider/path_provider.dart": path_provider,
    "package:csv/csv_settings_autodetection.dart": csv_settings_autodetection,
    "package:csv/src/complex_converter.dart": complex_converter,
    "package:csv/src/csv_parser.dart": csv_parser,
    "package:path_provider_platform_interface/path_provider_platform_interface.dart": path_provider_platform_interface,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:path_provider_platform_interface/src/enums.dart": enums,
    "package:path_provider_platform_interface/src/method_channel_path_provider.dart": method_channel_path_provider,
    "package:platform/platform.dart": platform,
    "package:platform/src/interface/local_platform.dart": local_platform,
    "package:platform/src/interface/platform.dart": platform$,
    "package:platform/src/testing/fake_platform.dart": fake_platform
  }, {
    "package:csv/csv.dart": ["csv_to_list_converter.dart", "list_to_csv_converter.dart"],
    "package:csv/src/csv_parser.dart": ["csv_argument_errors.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/screens/splash_screen.dart","/zapp/project/lib/screens/main_screen.dart","/zapp/project/lib/screens/game_page.dart","/zapp/project/lib/screens/options_screen.dart","/zapp/project/lib/screens/high_scores.dart","/zapp/project/lib/screens/single_player_game.dart","/zapp/pub/.pub_cache/hosted/pub.dev/csv-5.1.1/lib/csv.dart","/zapp/pub/.pub_cache/hosted/pub.dev/csv-5.1.1/lib/csv_to_list_converter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/csv-5.1.1/lib/list_to_csv_converter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/path_provider-2.1.1/lib/path_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/csv-5.1.1/lib/csv_settings_autodetection.dart","/zapp/pub/.pub_cache/hosted/pub.dev/csv-5.1.1/lib/src/complex_converter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/csv-5.1.1/lib/src/csv_parser.dart","/zapp/pub/.pub_cache/hosted/pub.dev/csv-5.1.1/lib/src/csv_argument_errors.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/path_provider_platform_interface-2.1.1/lib/path_provider_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/path_provider_platform_interface-2.1.1/lib/src/enums.dart","/zapp/pub/.pub_cache/hosted/pub.dev/path_provider_platform_interface-2.1.1/lib/src/method_channel_path_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/platform-3.1.3/lib/src/interface/platform.dart","/zapp/pub/.pub_cache/hosted/pub.dev/platform-3.1.3/lib/src/interface/local_platform.dart","/zapp/pub/.pub_cache/hosted/pub.dev/platform-3.1.3/lib/src/testing/fake_platform.dart"],"names":[],"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__screens__splash_screen: splash_screen,
    zapp__project__lib__screens__main_screen: main_screen,
    zapp__project__lib__screens__game_page: game_page,
    zapp__project__lib__screens__options_screen: options_screen,
    zapp__project__lib__screens__high_scores: high_scores,
    zapp__project__lib__screens__single_player_game: single_player_game,
    csv: csv$,
    path_provider: path_provider,
    csv_settings_autodetection: csv_settings_autodetection,
    src__complex_converter: complex_converter,
    src__csv_parser: csv_parser,
    path_provider_platform_interface: path_provider_platform_interface,
    plugin_platform_interface: plugin_platform_interface,
    src__enums: enums,
    src__method_channel_path_provider: method_channel_path_provider,
    platform: platform,
    src__interface__local_platform: local_platform,
    src__interface__platform: platform$,
    src__testing__fake_platform: fake_platform
  };
}));

//# sourceMappingURL=main.js.map
